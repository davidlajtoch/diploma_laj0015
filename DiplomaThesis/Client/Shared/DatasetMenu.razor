@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using System.Data;

@inject IDatasetService DatasetService
@inject IDatasetRowService DatasetRowService
@inject IFileParsingService Parser

<div class="dataset_menu_container animate__animated animate__fadeIn" style="display: @(ShowDatasetMenu ? "block" : "none");">
    <div class="dataset_menu">
        @if (Dataset is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <div class="section_dataset_info animate__animated animate__fadeIn @(ShowFileFormatGuide ? "hidden" : "")">
                <table class="table_info">
                    <tr>
                        <td class="label">ID</td>
                        <td>@Dataset.Id</td>
                    </tr>
                    <tr>
                        <td class="label">Name</td>
                        <td>@Dataset.Name</td>
                    </tr>
                    <tr>
                        <td class="label">Columns</td>
                        <td>@Dataset.ColumnNames.Count()</td>
                    </tr>
                    <tr>
                        <td class="label">Uploaded through ReporTiny</td>
                        <td>@Dataset.ColumnNames.Any()</td>
                    </tr>
                </table>

                <div class="section_header">Existing data preview</div>
                @if (@Dataset.ColumnNames.Any())
                {
                    <table class="table_dataset_preview">
                        <tr>
                            @for (int i = 0; i < Dataset.ColumnNames.Count(); i++)
                            {
                                <th>
                                    @Dataset.ColumnNames[i] :
                                    <span class="text_light">@Dataset.ColumnTypes[i]</span>
                                </th>
                            }
                        </tr>
                        @if(DatasetRowsExistingData != null)
                        {
                            foreach (var row in DatasetRowsExistingData)
                            {
                                <tr>
                                    @foreach(var value in row)
                                    {
                                        <td>@value</td>
                                    }
                                </tr>
                            }
                        }
                    </table>
                }
                else
                {
                    <div class="info_preview_not_available text_light">Existing data preview is only available for datasets uploaded through ReporTiny</div>
                }

                <div class="section_header">New data preview</div>

                @if (DatasetFileLoadProgress == 0)
                {
                    <DragAndDropFileLoader OnFileLoaded=@LoadDatasetFile />
                }

                @if (DatasetFileLoadProgress == 1)
                {
                    <div class="container_loading_file animate__animated animate__fadeIn">
                        <LoaderSmall />
                        <span>Loading the file, please wait...</span>
                    </div>
                }

                @if (DatasetFileLoadProgress == 2 && DatasetNewDataTable != null)
                {
                    <DatasetPreviewTable DatasetDataTable="DatasetNewDataTable" OnDatasetFileLoaded="CompareDatasetColumnTypes" />
                }

                @if (DatasetFileLoadProgress == 3)
                {
                    <div class="container_uploading_file animate__animated animate__fadeIn">
                        <LoaderSmall />
                        <span>Uploading the file, please wait...</span>
                    </div>
                }

                @if (DatasetFileLoadProgress == 4)
                {
                    <div class="container_loading_file_wrong_format animate__animated animate__fadeIn">
                        <span>There seems to be an error in the file you are trying to load</span><br />
                        <span>Please check the file and try again</span>
                    </div>
                }

                @if (DatasetFileLoadProgress == 5)
                {
                    <div class="info_columns_do_not_match animate__animated animate__fadeIn">
                        <span>Error occured while trying to upload the file.</span><br />
                        <span>Please check the dataset in PowerBi and ensure that the data types match.</span>
                    </div>
                }

                @if (!DatasetColumnTypesMatch)
                {
                    <div class="info_columns_do_not_match animate__animated animate__fadeIn">
                        <span>Column types of existing Dataset do not match with the column types of this file.</span><br />
                        <span>Try correcting the file and try again.</span>
                    </div>
                }

                <div class="bottom_menu">
                    <div class="group_left">
                        <button class="button_default" @onclick="ToggleFileFormatGuide">Format guide</button>
                        <button class="button_warning" @onclick="DeleteDataset" @onmouseout="ResetDatasetDeleteConfirm">
                            @(DeleteDatasetConfirmation ? "Are you sure?" : "Delete dataset")
                        </button>
                    </div>
                    <div class="group_right">
                        @if (DatasetFileLoadProgress == 2 || DatasetFileLoadProgress == 4 || DatasetFileLoadProgress == 5)
                        {
                            <button class="button_default animate__animated animate__fadeIn" @onclick="ResetDatasetFileUploadState">Choose another file</button>
                        }
                        @if (DatasetNewJson != null && DatasetNewJson != string.Empty && DatasetColumnTypesMatch)
                        {
                            <button class="button_default" @onclick="() => AddRowsToDataset(DatasetNewJson)">Upload rows</button>
                        }
                        <button class="button_default" @onclick="SaveAndToggleDatasetMenu">Close</button>
                    </div>
                </div>
            </div>
            <div class="@(ShowFileFormatGuide ? "" : "hidden")">
                <FileFormatGuide OnHide=ToggleFileFormatGuide />
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnDatasetChanged { get; set; }

    private DatasetContract? Dataset { get; set; }
    private DataTable? DatasetNewDataTable { get; set; }
    private string DatasetNewJson { get; set; } = string.Empty;
    private string DatasetNewName { get; set; } = string.Empty;
    private List<List<string>>? DatasetRowsExistingData { get; set; }
    private List<string>? DatasetNewColumnTypes { get; set; }

    public bool ShowDatasetMenu { get; set; }
    private bool ShowFileFormatGuide = false;
    private bool DatasetColumnTypesMatch = true;
    private bool DeleteDatasetConfirmation = false;
    private int DatasetFileLoadProgress = 0;
    private const int DatasetPreviewMaxRows = 5;

    public async Task SaveAndToggleDatasetMenu()
    {
        ShowDatasetMenu = !ShowDatasetMenu;
        ResetDatasetFileUploadState();
    }

    public async Task ShowDataset(DatasetContract dataset)
    {
        Dataset = dataset;
        DatasetRowsExistingData = await DatasetRowService.GetDatasetRowsByDatasetId(dataset.Id);

        ShowDatasetMenu = true;

        StateHasChanged();
    }

    private void ResetDatasetFileUploadState()
    {
        DatasetFileLoadProgress = 0;
        DatasetNewDataTable = null;
        DatasetNewJson = string.Empty;
        ShowFileFormatGuide = false;
    }

    private void ResetDatasetDeleteConfirm()
    {
        DeleteDatasetConfirmation = false;
    }

    private async Task CompareDatasetColumnTypes(List<string> newDatasetColumnTypes)
    {
        if (!Dataset!.ColumnTypes.SequenceEqual(newDatasetColumnTypes) && Dataset!.ColumnTypes.Any())
        {
            DatasetColumnTypesMatch = false;
            return;
        }
        DatasetColumnTypesMatch = true;
    }

    private async Task LoadDatasetFile(IBrowserFile datasetFile)
    {
        if (Dataset == null || Dataset.Id == Guid.Empty)
        {
            return;
        }

        DatasetFileLoadProgress = 1;

        try
        {
            string datasetFileExtension = datasetFile.Name.Split(".").Last();
            DatasetNewName = datasetFile.Name.Split(".").First();
            DatasetNewJson = await Parser.ParseFileToJson(datasetFile, datasetFileExtension);
            DatasetNewDataTable = await Parser.ParseJsonToDataTable(DatasetNewJson);
            DatasetFileLoadProgress = 2;
        }
        catch
        {
            DatasetFileLoadProgress = 4;
            StateHasChanged();
            await Task.Delay(6000);
            DatasetFileLoadProgress = 0;
        }
    }

    private async Task AddRowsToDataset(string datasetJson)
    {
        if (Dataset == null || Dataset.Id == Guid.Empty || DatasetNewJson == null || DatasetNewJson == string.Empty)
        {
            return;
        }

        DatasetFileLoadProgress = 3;

        if (await DatasetService.UploadRowsToDataset(Dataset.Id, DatasetNewJson))
        {
            await OnDatasetChanged.InvokeAsync();
            await SaveAndToggleDatasetMenu();
            return;
        }
        else
        {
            DatasetFileLoadProgress = 5;
        }
    }


    public void ToggleFileFormatGuide()
    {
        ShowFileFormatGuide = !ShowFileFormatGuide;
    }

    private async Task DeleteDataset()
    {
        if (DeleteDatasetConfirmation == false)
        {
            DeleteDatasetConfirmation = true;
            return;
        }

        if (Dataset is null)
        {
            return;
        }

        if (await DatasetService.DeleteDataset(Dataset.PowerBiId))
        {
            await OnDatasetChanged.InvokeAsync();
            await SaveAndToggleDatasetMenu();
        }
    }
}
