@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IReportService ReportService
@inject IDatasetService DatasetService
@inject IAdministrationService AdministrationService

<div class="report_menu_container animate__animated animate__fadeIn" style="display: @(ShowMenu ? "block" : "none");">
    <div class="report_menu">
        @if (Report is null || UserGroups is null || Datasets is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@Report.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@Report.Name</td>
                </tr>
            </table>

            <div class="section_header">User group</div>
            <div class="user_group_selected">
                @if (AssignedUserGroupName == null)
                {
                    <div class="name text_light animate__animated animate__fadeInDown">No user group assigned</div>
                }
                else
                {
                    <div class="name animate__animated animate__fadeInUp">@AssignedUserGroupName</div>
                    <button class="button_tiny_default animate__animated animate__fadeInUp" @onclick="() => RemoveReportFromUserGroup(Report)">
                        <i class="material-icons icon">remove</i>
                    </button>
                }
            </div>

            <input type="text" class="input_search_default input_search nohover" placeholder="Search and select User group..."
               @oninput="@((e) => SearchUserGroup(e.Value!.ToString()!))">
            <div class="list_user_groups">
                @foreach (var userGroup in UserGroupsFiltered!)
                {
                    if (userGroup.Id == Report.UserGroupId) { continue; }
                    <div class="user_group" @onclick="()=> MoveReportToUserGroup(userGroup)">
                        @userGroup.Name
                    </div>
                }
            </div>

            <div class="section_header">Dataset</div>
            <div class="dataset_selected">
                @if (AssignedDatasetName == null)
                {
                    <div class="name text_light animate__animated animate__fadeInDown">No dataset assigned</div>
                }
                else
                {
                    <div class="animate__animated animate__fadeInUp">
                        <div class="name">@AssignedDatasetName</div>
                    </div>
                }
            </div>

            <input type="text" class="input_search_default input_search nohover" placeholder="Search and select Dataset..."
               @oninput="@((e) => SearchDataset(e.Value!.ToString()!))">
            <div class="list_datasets">
                @foreach (var dataset in DatasetsFiltered!)
                {
                    <div class="dataset" @onclick="()=> RebindReportToDataset(dataset)">
                        @dataset.Name
                    </div>
                }
            </div>

            <div class="section_header">Clone metric</div>
            <div class="input_with_button_default input_with_button">
                <input class="nohover" @bind="NewReportName" type="text" placeholder="New metric name...">
                <button class="button1" @onclick="CloneReportButton"><i class="material-icons icon">add</i></button>
            </div>

            <div class="bottom_menu">
                <div class="group_left">
                    <button class="button_warning" @onclick="DeleteReportButton" @onmouseout="ResetReportDeleteConfirm">
                        @(DeleteReportConfirmation ? "Are you sure?" : "Delete metric")
                    </button>
                </div>
                <div class="group_right">
                    <button class="button_default" @onclick="HideReportMenu">Save and close</button>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnReportChanged { get; set; }

    private ReportContract? Report { get; set; } = null;

    private List<UserGroupContract>? UserGroups { get; set; }
    private List<UserGroupContract>? UserGroupsFiltered { get; set; }
    private List<DatasetContract>? Datasets { get; set; }
    private List<DatasetContract>? DatasetsFiltered { get; set; }

    private string? AssignedUserGroupName { get; set; }
    private string? AssignedDatasetName { get; set; }
    private string? SelectedUserGroupId { get; set; }
    private string? SelectedDatasetId { get; set; }
    private string NewReportName = string.Empty;

    public bool ShowMenu { get; set; }
    private bool DeleteReportConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public void ShowReportMenu(ReportContract report)
    {
        Report = report;
        SelectedUserGroupId = report.UserGroupId.ToString();
        SelectedDatasetId = report.DatasetId.ToString();

        AssignedUserGroupName = UserGroups!.FirstOrDefault(
                                    ug => ug?.Id.Equals(Report!.UserGroupId) ?? false, null
                                )?.Name;
        AssignedDatasetName = Datasets!.FirstOrDefault(
                                    Datasets => Datasets?.Id.Equals(Report!.DatasetId) ?? false, null
                                )?.Name;

        NewReportName = string.Empty;
        ShowMenu = true;
    }

    public void HideReportMenu()
    {
        ShowMenu = false;
    }

    private async Task UpdateData()
    {
        var userGroups = await AdministrationService.GetAllUserGroups();
        UserGroups = userGroups;
        UserGroupsFiltered = UserGroups;

        var datasets = await DatasetService.GetDatasets();
        Datasets = datasets;
        DatasetsFiltered = Datasets;

        StateHasChanged();
    }

    private async Task RebindReportToDataset(DatasetContract dataset)
    {
        if (dataset is null)
        {
            return;
        }

        if (Report is not null)
        {
            if (await ReportService.RebindReportToDataset(Report!.Id, dataset.Id))
            {
                await OnReportChanged.InvokeAsync();
                AssignedDatasetName = dataset.Name;
                StateHasChanged();
            }
        }
    }

    private async Task MoveReportToUserGroup(UserGroupContract userGroup)
    {
        if (userGroup == null)
        {
            return;
        }

        if (Report is not null)
        {
            if (await ReportService.MoveReportToUserGroup(Report!.Id, userGroup.Id))
            {
                AssignedUserGroupName = userGroup.Name;
                Report.UserGroupId = userGroup.Id;
                await OnReportChanged.InvokeAsync();
                StateHasChanged();
            }
        }
    }

    private async Task RemoveReportFromUserGroup(ReportContract report)
    {
        if (report is null || Report is null || report.UserGroupId == Guid.Empty)
        {
            return;
        }

        var userGroupOld = UserGroups!.Find(ug => ug.Id == report.UserGroupId);

        if (await ReportService.RemoveReportFromUserGroup(report.Id))
        {
            AssignedUserGroupName = null;
            Report.UserGroupId = null;
            await OnReportChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task CloneReportButton()
    {
        if (await ReportService.CloneReport(Report!.Id, NewReportName))
        {
            await OnReportChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteReportButton()
    {
        if (DeleteReportConfirmation == false)
        {
            DeleteReportConfirmation = true;
            return;
        }
        if (await ReportService.DeleteReport(Report?.Id ?? Guid.Empty))
        {
            ShowMenu = false;
            await OnReportChanged.InvokeAsync();
        }
    }

    private void ResetReportDeleteConfirm()
    {
        DeleteReportConfirmation = false;
    }

    private void SearchUserGroup(string searched_user_group)
    {
        UserGroupsFiltered = UserGroups!.FindAll(ug => ug.Name.Contains(searched_user_group));
    }

    private void SearchDataset(string searched_dataset)
    {
        DatasetsFiltered = Datasets!.FindAll(d => d.Name.Contains(searched_dataset));
    }


}