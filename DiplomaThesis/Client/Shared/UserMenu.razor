@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IAdministrationService AdministrationService

<div class="user_menu_container animate__animated animate__fadeIn" style="display: @(ShowUserMenu ? "block" : "none");">
    <div class="user_menu">
        @if (User is null || RolesUser is null || RolesOther is null || UserGroups is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@User.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@User.Name</td>
                </tr>
            </table>

            <div class="section_header">User roles</div>
            <div class="list_roles">
                @foreach (var role in RolesUser)
                {
                    <div class="role animate__animated animate__fadeInUp">
                        <div class="name">@role.Name</div>
                        @if (role.Name != "Admin")
                        {
                            <button class="button_tiny_default" @onclick="() => RemoveRole(User, role)">
                                <i class="material-icons icon">remove</i>
                            </button>
                        }
                    </div>
                }
            </div>

            <div class="section_header">Available roles</div>
            <div class="list_roles">
                @foreach (var role in RolesOther!)
                {
                    @if (role.Name != "Admin")
                    {
                        <div class="role animate__animated animate__fadeInDown">
                            <div class="name">@role.Name</div>
                            <button class="button_tiny_default" @onclick="() => AddRole(User, role)">
                                <i class="material-icons icon">add</i>
                            </button>
                        </div>
                    }
                }
            </div>

            <div class="section_header">User group</div>
            <div class="user_group_selected">
                @if (_assignedUserGroupName == null)
                {
                    <div class="name text_light animate__animated animate__fadeInDown">No user group assigned</div>
                }
                else
                {
                    <div class="name animate__animated animate__fadeInUp">@_assignedUserGroupName</div>
                    <button class="button_tiny_default animate__animated animate__fadeInUp" @onclick="() => RemoveUserFromUserGroup(User)">
                        <i class="material-icons icon">remove</i>
                    </button>
                }
            </div>

            <input type="text" class="input_search_default input_search nohover" placeholder="Search and select User group..."
               @oninput="@((e) => SearchUserGroup(e.Value!.ToString()!))">
            <div class="list_user_groups">
                @foreach (var userGroup in UserGroupsFiltered!)
                {
                    if (User.UserGroupId == userGroup.Id) { continue; }
                    <div class="user_group" @onclick="()=> MoveUserToUserGroup(userGroup)">
                        @userGroup.Name
                    </div>
                }
            </div>
        }
        <div class="bottom_menu">
            <div class="group_left">
                <button class="button_warning" @onclick="DeleteUser" @onmouseout="ResetUserDeleteConfirm">
                    @(_deleteUserConfirmation ? "Are you sure?" : "Delete user")
                </button>
            </div>
            <div class="group_right">
                <button class="button_default" @onclick="ToggleUserMenu">Save and close</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public EventCallback OnUserChanged { get; set; }

    private UserContract? User { get; set; }
    private List<RoleContract>? RolesUser { get; set; }
    private List<RoleContract>? RolesOther { get; set; }
    private List<UserGroupContract>? UserGroups { get; set; }
    private List<UserGroupContract>? UserGroupsFiltered { get; set; }

    public bool ShowUserMenu { get; set; }

    private bool _deleteUserConfirmation = false;

    private string? _assignedUserGroupName { get; set; }
    private string? _searchedUserGroupName { get; set; }

    public void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
        _deleteUserConfirmation = false;
    }

    public async Task ShowUser(UserContract user)
    {
        User = user;

        var roles = await AdministrationService.GetAllRoles();
        RolesUser = User.Roles;
        RolesOther = roles!.FindAll(r1 => User!.Roles.All(r2 => r2.Name != r1.Name));

        var userGroups = await AdministrationService.GetAllUserGroups();
        UserGroups = userGroups;
        UserGroupsFiltered = userGroups;

        _assignedUserGroupName = UserGroups!.FirstOrDefault(
                                    UserGroups => UserGroups?.Id.Equals(user.UserGroupId) ?? false, null
                                )?.Name;

        ShowUserMenu = true;
        StateHasChanged();
    }

    private async Task MoveUserToUserGroup(UserGroupContract? userGroup)
    {
        if (userGroup is null || User is null)
        {
            return;
        }

        if (await AdministrationService.MoveUserToUserGroup(User!.Id, userGroup.Id))
        {

            User.UserGroupId = userGroup.Id;
            _assignedUserGroupName = userGroup.Name;
            await OnUserChanged.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task RemoveUserFromUserGroup(UserContract? user)
    {
        if (user is null || User is null)
        {
            return;
        }

        if (await AdministrationService.RemoveUserFromUserGroup(user.Id, user.UserGroupId))
        {
            await OnUserChanged.InvokeAsync();
            User.UserGroupId = Guid.Empty;
            _assignedUserGroupName = null;
            StateHasChanged();
        }
    }

    private async Task AddRole(UserContract user, RoleContract role)
    {
        if (user is null || role is null || User is null)
        {
            return;
        }

        if (await AdministrationService.AddRole(user.Id, role.Name))
        {
            await OnUserChanged.InvokeAsync();
            RolesOther!.Remove(role);
            RolesUser!.Add(role);
            StateHasChanged();
        }
    }

    private async Task RemoveRole(UserContract user, RoleContract role)
    {
        if (user is null || role is null || User is null)
        {
            return;
        }

        if (await AdministrationService.RemoveRole(user.Id, role.Name))
        {
            await OnUserChanged.InvokeAsync();
            RolesUser!.Remove(role);
            RolesOther!.Add(role);
            StateHasChanged();
        }
    }

    private async Task DeleteUser()
    {
        if (_deleteUserConfirmation == false)
        {
            _deleteUserConfirmation = true;
            return;
        }

        if (User is null)
        {
            return;
        }

        if (await AdministrationService.DeleteUser(User!.Id))
        {
            ToggleUserMenu();
            await OnUserChanged.InvokeAsync();
        }
    }

    private void ResetUserDeleteConfirm()
    {
        _deleteUserConfirmation = false;
    }

    private void SearchUserGroup(string searched_user_group)
    {
        UserGroupsFiltered = UserGroups!.FindAll(ug => ug.Name.Contains(searched_user_group));
    }

}