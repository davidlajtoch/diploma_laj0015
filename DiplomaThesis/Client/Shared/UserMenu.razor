@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IAdministrationService AdministrationService

<div class="user_menu_container animate__animated animate__fadeIn" style="display: @(ShowUserMenu ? "block" : "none");">
    <div class="user_menu">
        @if (User is null || Roles is null || UserGroups is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@User.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@User.Name</td>
                </tr>
                <tr></tr>
            </table>

            <div class="section_header">Roles</div>
            <table class="table">
                @foreach (var role in Roles)
                {
                    <tr>
                        <td>
                            @role.Name
                        </td>
                        @if (!role.Name.Equals("Admin"))
                        {
                            @if (User.Roles.Any(roleInUser => roleInUser.Name.Equals(role.Name)))
                            {
                                <button class="btn btn-outline-dark oi oi-minus"
                        @onclick="() => AdministrationService.RemoveRole(User.Name, role.Name)">
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-dark oi oi-plus"
                        @onclick="() => AdministrationService.AddRole(User.Name, role.Name)">
                                </button>
                            }
                        }
                    </tr>
                }
            </table>

            <div class="section_header">User group</div>
            <input type="text" class="selected_user_group" placeholder="Search and select User group..." value="@SelectedUserGroupName">
            <div class="user_group_list">
                @foreach (var userGroup in UserGroups)
                {
                    <div class="user_group" @onclick="()=> SelectedUserGroupChanged2(userGroup)">
                        @userGroup.Name
                    </div>
                    
                }
            </div>


            <label>
                <select id="user_groups"
                    name="user_groups"
                    value="@SelectedUserGroupId"
                    @onchange="SelectedUserGroupChanged">
                    <option value="@Guid.Empty.ToString()">&lt;No group assigned&gt;</option>
                    @foreach (var userGroup in UserGroups)
                    {
                        <option value="@userGroup.Id.ToString()">
                            @userGroup.Name
                        </option>
                    }
                </select>
            </label>
        }
        <div class="bottom_menu">
            <div class="buttons">
                <button class="button_delete" @onclick="DeleteUserButton" @onmouseout="ResetUserDeleteConfirm">
                    @(_delete_user_confirmation ? "Are you sure?" : "Delete user")
                </button>
                <button class="button_save" @onclick="ToggleUserMenu">Save and close</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public EventCallback OnUserChanged { get; set; }

    private UserContract? User { get; set; }
    private RoleContract[]? Roles { get; set; }
    private UserGroupContract[]? UserGroups { get; set; }

    public bool ShowUserMenu { get; set; }

    private string _selectedUserGroupId = Guid.Empty.ToString();
    private bool _delete_user_confirmation = false;

    private string? SelectedUserGroupName { get; set; }
    private string SelectedUserGroupId
    {
        get => _selectedUserGroupId;
        set
        {
            _selectedUserGroupId = value;
            StateHasChanged();
        }
    }
    

    protected override async Task OnInitializedAsync()
    {
        var roles = await AdministrationService.GetRoles();
        Roles = roles;

        var userGroups = await AdministrationService.GetUserGroups();
        UserGroups = userGroups;
    }

    public void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
        _delete_user_confirmation = false;
    }

    public void ShowUser(UserContract user)
    {
        User = user;
        ShowUserMenu = true;
        SelectedUserGroupId = User.UserGroupId.ToString();
        SelectedUserGroupName = UserGroups!.FirstOrDefault(
                                    UserGroups => UserGroups?.Id.Equals(user.UserGroupId) ?? false, null
                                )?.Name;
        StateHasChanged();
    }

    private async Task SelectedUserGroupChanged(ChangeEventArgs e)
    {
        var selectedUserGroupId = e.Value?.ToString();

        if (selectedUserGroupId is null)
        {
            return;
        }

        SelectedUserGroupId = selectedUserGroupId;

        if (User is not null && !User.UserGroupId.Equals(Guid.Parse(SelectedUserGroupId)))
        {
            if (await AdministrationService.MoveUserToUserGroup(User!.Id, Guid.Parse(SelectedUserGroupId)))
            {
                await OnUserChanged.InvokeAsync();
                await AdministrationService.GetUser(User!.Id);
                StateHasChanged();
            }
        }
    }

    private async Task SelectedUserGroupChanged2(UserGroupContract selected_user_group)
    {
        if (selected_user_group is null)
        {
            return;
        }

        SelectedUserGroupId = selected_user_group.Id.ToString();
        SelectedUserGroupName = selected_user_group.Name;

        if (User is not null && !User.UserGroupId.Equals(Guid.Parse(SelectedUserGroupId)))
        {
            if (await AdministrationService.MoveUserToUserGroup(User!.Id, Guid.Parse(SelectedUserGroupId)))
            {
                await OnUserChanged.InvokeAsync();
                await AdministrationService.GetUser(User!.Id);
                StateHasChanged();
                
            }
        }
    }

    private async Task AddRoleButton(string userName, string roleName)
    {
        if (await AdministrationService.AddRole(userName, roleName))
        {
            await OnUserChanged.InvokeAsync();
            var user = await AdministrationService.GetUser(User!.Id);
            if (user is not null)
            {
                User = user;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveRoleButton(string userName, string roleName)
    {
        if (await AdministrationService.RemoveRole(userName, roleName))
        {
            await OnUserChanged.InvokeAsync();
            var user = await AdministrationService.GetUser(User!.Id);
            if (user is not null)
            {
                User = user;
                StateHasChanged();
            }
        }
    }

    private void ResetUserDeleteConfirm(){
        if(_delete_user_confirmation == true){
            _delete_user_confirmation = false;
        }
    }

    private async Task DeleteUserButton()
    {
        if(_delete_user_confirmation == false){
            _delete_user_confirmation = true;
            return;
        }
        if (await AdministrationService.DeleteUser(User!.Name))
        {
            ToggleUserMenu();
            await OnUserChanged.InvokeAsync();
        }
    }

}