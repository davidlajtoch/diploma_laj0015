@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IAdministrationService AdministrationService

<div class="user_menu_container animate__animated animate__fadeIn" style="display: @(ShowUserMenu ? "block" : "none");">
    <div class="user_menu">
        @if (User is null || Roles is null || UserGroups is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@User.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@User.Name</td>
                </tr>
            </table>

            <div class="section_header">User roles</div>
            <div class="list_roles">
                @foreach (var role in User.Roles)
                {
                    <div class="role animate__animated animate__fadeInUp">
                        <div class="name">@role.Name</div>
                        @if (role.Name != "Admin")
                        {
                            <button @onclick="() => RemoveRole(User.Name, role.Name)">
                                <i class="material-icons icon">remove</i>
                            </button>
                        }
                    </div>
                }
            </div>

            <div class="section_header">Available roles</div>
            <div class="list_roles">
                @foreach (var role in UserRolesOther!)
                {
                    @if (role.Name != "Admin")
                    {
                        <div class="role animate__animated animate__fadeInDown">
                            <div class="name">@role.Name</div>
                            <button @onclick="() => AddRole(User.Name, role.Name)">
                                <i class="material-icons icon">add</i>
                            </button>
                        </div>
                    }
                } 
            </div>

            <table class="table_info">
                <tr>
                    <td class="label">User group</td>
                    <td>@AssignedUserGroupName</td>
                </tr>
            </table>

            <input type="text" class="input_search_default input_search nohover" placeholder="Search and select User group..."
               @oninput="@((e) => SearchUserGroup(e.Value!.ToString()!))">
            <div class="list_user_groups">
                @foreach (var userGroup in UserGroupsFiltered!)
                {
                    <div class="user_group" @onclick="()=> SelectedUserGroupChanged(userGroup)">
                        @userGroup.Name
                    </div>
                }
            </div>
        }
        <div class="bottom_menu">
            <div class="group_left">
                <button class="button_warning" @onclick="DeleteUserButton" @onmouseout="ResetUserDeleteConfirm">
                    @(_deleteUserConfirmation ? "Are you sure?" : "Delete user")
                </button>
            </div>
            <div class="group_right">
                <button class="button_default" @onclick="ToggleUserMenu">Save and close</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public EventCallback OnUserChanged { get; set; }

    private UserContract? User { get; set; }
    private List<RoleContract>? Roles { get; set; }
    private List<RoleContract>? UserRolesOther { get; set; }
    private List<UserGroupContract>? UserGroups { get; set; }
    private List<UserGroupContract>? UserGroupsFiltered { get; set; }

    public bool ShowUserMenu { get; set; }

    private bool _deleteUserConfirmation = false;

    private string? AssignedUserGroupName { get; set; }
    private string? SearchedUserGroupName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var roles = await AdministrationService.GetAllRoles();
        Roles = roles;

        var userGroups = await AdministrationService.GetAllUserGroups();
        UserGroups = userGroups;
        UserGroupsFiltered = userGroups;
    }

    public void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
        _deleteUserConfirmation = false;
    }

    public void ShowUser(UserContract user)
    {
        User = user;
        ShowUserMenu = true;

        AssignedUserGroupName = UserGroups!.FirstOrDefault(
                                    UserGroups => UserGroups?.Id.Equals(user.UserGroupId) ?? false, null
                                )?.Name;
        UserRolesOther = Roles!.Where(r1 => User.Roles.All(r2 => r2.Name != r1.Name)).ToList();
        StateHasChanged();
    }

    private async Task SelectedUserGroupChanged(UserGroupContract userGroup)
    {
        if (userGroup is null || User is null)
        {
            return;
        }

        if (await AdministrationService.MoveUserToUserGroup(User!.Id, userGroup.Id))
        {
            await OnUserChanged.InvokeAsync();
            await AdministrationService.GetUser(User!.Id);
            AssignedUserGroupName = userGroup.Name;
            StateHasChanged();
        }
    }

    private async Task AddRole(string userName, string roleName)
    {
        if (await AdministrationService.AddRole(userName, roleName))
        {
            await OnUserChanged.InvokeAsync();
            var user = await AdministrationService.GetUser(User!.Id);
            if (user is not null)
            {
                User = user;
                UserRolesOther = UserRolesOther!.FindAll(r => r.Name != roleName);
                StateHasChanged();
            }
        }
    }

    private async Task RemoveRole(string userName, string roleName)
    {
        if (await AdministrationService.RemoveRole(userName, roleName))
        {
            await OnUserChanged.InvokeAsync();
            var user = await AdministrationService.GetUser(User!.Id);
            if (user is not null)
            {
                User = user;
                UserRolesOther!.Add((Roles!.FirstOrDefault(r => r.Name == roleName)!));
                StateHasChanged();
            }
        }
    }

    private void ResetUserDeleteConfirm(){
        if (_deleteUserConfirmation == true)
        {
            _deleteUserConfirmation = false;
        }
    }

    private void SearchUserGroup(string searched_user_group){
        UserGroupsFiltered = UserGroups!.FindAll(ug => ug.Name.Contains(searched_user_group));
    }

    private async Task DeleteUserButton()
    {
        if (_deleteUserConfirmation == false)
        {
            _deleteUserConfirmation = true;
            return;
        }
        if (await AdministrationService.DeleteUser(User!.Name))
        {
            ToggleUserMenu();
            await OnUserChanged.InvokeAsync();
        }
    }

}