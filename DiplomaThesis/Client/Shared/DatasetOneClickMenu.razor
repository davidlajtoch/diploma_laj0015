@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using System.Data;

@inject IDatasetService DatasetService
@inject IFileParsingService Parser
@inject IAdministrationService AdministrationService
@inject IJSRuntime JSRuntime

<div class="dataset_menu_container animate__animated animate__fadeIn" style="display: @(ShowDatasetMenu ? "block" : "none");">
    <div class="dataset_menu">
        <div class="@(ShowFileFormatGuide ? "hidden" : "")">
            <div class="section_dataset_info animate__animated animate__fadeIn">
                <div class="section_header">Dataset files <span class="text_light">(@DatasetFileNames.Count())</span></div>
                @if (DatasetFileNames != null)
                {
                    <div class="list_dataset_files_container">
                        <div class="list_dataset_files">
                            @for (int i = 0; i < DatasetFileNames.Count(); i++)
                            {
                                <div class="row">
                                    <div class="file_name">@DatasetFileNames[i]</div>
                                    <div class="status">
                                        @if (DatasetFilesUploadStateProgress[i] == DatasetFileUploadStates[1])
                                        {
                                            <LoaderTiny />
                                        }
                                        else
                                        {
                                            @if (DatasetFilesUploadStateProgress[i] == DatasetFileUploadStates[0])
                                            {
                                                <span>@DatasetFilesUploadStateProgress[i]</span>
                                            }
                                            @if (DatasetFilesUploadStateProgress[i] == DatasetFileUploadStates[2])
                                            {
                                                <i class="material-icons icon text_purple animate__animated animate__fadeIn">check_circle</i>
                                            }
                                            @if (DatasetFilesUploadStateProgress[i] == DatasetFileUploadStates[3])
                                            {
                                                <i class="material-icons icon text_red animate__animated animate__fadeIn">cancel</i>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="bottom_menu">
                    <div class="group_left">
                        <button class="button_default" @onclick="ToggleFileFormatGuide">Format guide</button>
                    </div>
                    <div class="group_right">
                        <button class="button_default @(UploadInProgress ? "hidden" : "") animate__animated animate__fadeIn"
                                @onclick="UploadRowsToDatasets">
                            Upload rows
                        </button>
                        <button class="button_default" @onclick="SaveAndToggleDatasetMenu">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="@(ShowFileFormatGuide ? "" : "hidden")">
            <FileFormatGuideOneClick OnHide=ToggleFileFormatGuide />
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnDatasetChanged { get; set; }

    private List<string> DatasetFileNames { get; set; } = new();
    private List<string> DatasetFilesUploadStateProgress { get; set; } = new();
    private List<string> DatasetFileUploadStates = new List<string>
    { "Waiting", "Uploading", "Done", "Error" };

    private int CurrentDatasetFileUploadIndex { get; set; } = 0;
    private bool ShowFileFormatGuide = false;
    private bool UploadInProgress = false;
    public bool ShowDatasetMenu { get; set; }


    public async Task SaveAndToggleDatasetMenu()
    {
        ShowDatasetMenu = !ShowDatasetMenu;
        CurrentDatasetFileUploadIndex = 0;
    }

    public async Task Show()
    {
        CurrentDatasetFileUploadIndex = 0;
        await LoadDatasetFileNames();

        DatasetFilesUploadStateProgress.Clear();
        foreach (var datasetFileName in DatasetFileNames)
        {
            DatasetFilesUploadStateProgress.Add(DatasetFileUploadStates[0]);
        }

        ShowDatasetMenu = true;
        StateHasChanged();
    }

    private async Task LoadDatasetFileNames()
    {
        DatasetFileNames = await DatasetService.GetServerDatasetFileNames();
    }

    private void ResetDatasetFileUploadProgress()
    {
        for (int i = 0; i < DatasetFilesUploadStateProgress.Count(); i++)
        {
            DatasetFilesUploadStateProgress[i] = DatasetFileUploadStates[0];
        }
    }

    private async Task UploadRowsToDatasets()
    {
        if (!DatasetFileNames.Any())
        {
            return;
        }

        ResetDatasetFileUploadProgress();
        UploadInProgress = true;

        foreach (var datasetFileName in DatasetFileNames)
        {
            DatasetFilesUploadStateProgress[CurrentDatasetFileUploadIndex] = DatasetFileUploadStates[1];
            if (await UploadRowsToDatasetByServerFileIndex(CurrentDatasetFileUploadIndex))
            {
                DatasetFilesUploadStateProgress[CurrentDatasetFileUploadIndex] = DatasetFileUploadStates[2];
                CurrentDatasetFileUploadIndex++;
                continue;
            }
            DatasetFilesUploadStateProgress[CurrentDatasetFileUploadIndex] = DatasetFileUploadStates[3];
            CurrentDatasetFileUploadIndex++;
        }
        UploadInProgress = false;
    }

    private async Task<bool> UploadRowsToDatasetByServerFileIndex(int datasetFileIndex)
    {
        if (await DatasetService.UploadRowsToDatasetByServerFileIndex(datasetFileIndex))
        {
            await OnDatasetChanged.InvokeAsync();
            return true;
        }
        return false;
    }

    public void ToggleFileFormatGuide()
    {
        ShowFileFormatGuide = !ShowFileFormatGuide;
    }
}
