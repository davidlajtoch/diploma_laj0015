@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IAdministrationService AdministrationService

<div class="user_group_menu_container animate__animated animate__fadeIn" style="display: @(ShowUserGroupMenu ? "block" : "none");">
    <div class="user_group_menu">
        @if (UserGroup is null || UsersMembers is null || UsersNonMembers is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@UserGroup.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@UserGroup.Name</td>
                </tr>
                <tr>
                    <td class="label">Leader</td>
                    <td>
                        @if (UsersMembers != null && UserGroup.LeaderId != null && UserGroup.LeaderId != Guid.Empty)
                        {
                            <span class="animate__animated animate__fadeInUp">@UsersMembers.FirstOrDefault(u => u.Id == UserGroup.LeaderId)!.Name</span>
                        }
                        else
                        {
                            <span class="text_light animate__animated animate__fadeInDown">No leader</span>
                        }
                    </td>
                </tr>
            </table>

            <div class="section_header">Description</div>
            <input type="text" class="input_search_default input_search nohover" placeholder="Describe this group..."
               @bind="UserGroupDescriptionInput">

            <div class="section_header">Members</div>
            <input type="text" class="input_search_default input_search nohover" placeholder="Search and remove users..."
               @oninput="@((e) => SearchMember(e.Value!.ToString()!))">

            <div class="user_list">
                @foreach (var user in UsersMembersFiltered!)
                {
                    <div class="user animate__animated animate__fadeInUp">
                        <div class="name">@user.Name</div>
                        <div class="buttons">
                            @if (user.Id != UserGroup.LeaderId)
                            {
                                <button class="button_tiny_default" @onclick="() => UpdateUserGroupLeader(user)">
                                    <i class="material-icons icon">person</i>
                                </button>
                            }
                            <button class="button_tiny_default" @onclick="() => RemoveUserFromUserGroup(user)">
                                <i class="material-icons icon">remove</i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="section_header">Non members</div>
            <input type="text" class="input_search_default input_search nohover" placeholder="Search and add users..."
               @oninput="@((e) => SearchNonMember(e.Value!.ToString()!))">

            <div class="user_list">
                @foreach (var user in UsersNonMembersFiltered!)
                {
                    <div class="user animate__animated animate__fadeInDown">
                        <div class="name">@user.Name</div>
                        <div class="buttons">
                            <button class="button_tiny_default" @onclick="() => MoveUserToUserGroup(user)">
                                <i class="material-icons icon">add</i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        <div class="bottom_menu">
            <div class="group_left">
                <button class="button_warning" @onclick="DeleteUserGroup" @onmouseout="ResetUserGroupDeleteConfirm">
                    @(_deleteUserGroupConfirmation ? "Are you sure?" : "Delete user group")
                </button>
            </div>
            <div class="group_right">
                <button class="button_default" @onclick="SaveAndToggleUserGroupMenu">Save and close</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnUserGroupChanged { get; set; }

    private UserGroupContract? UserGroup { get; set; }
    private List<UserContract>? UsersMembers { get; set; }
    private List<UserContract>? UsersMembersFiltered { get; set; }
    private List<UserContract>? UsersNonMembers { get; set; }
    private List<UserContract>? UsersNonMembersFiltered { get; set; }
    private string UserGroupDescriptionInput = string.Empty;

    public bool ShowUserGroupMenu { get; set; }

    private bool _deleteUserGroupConfirmation = false;

    public async Task SaveAndToggleUserGroupMenu()
    {
        if (!UserGroupDescriptionInput.Equals(UserGroup!.Description))
        {
            await AdministrationService.UpdateUserGroupDescription(UserGroup.Id, UserGroupDescriptionInput);
            await OnUserGroupChanged.InvokeAsync();
        }

        ShowUserGroupMenu = !ShowUserGroupMenu;
        _deleteUserGroupConfirmation = false;
    }

    public async Task ShowUserGroup(UserGroupContract userGroup)
    {
        UserGroup = userGroup;
        UserGroupDescriptionInput = userGroup.Description;

        var users = await AdministrationService.GetAllUsers();

        UsersMembers = users!.FindAll(u => u.UserGroupId == UserGroup.Id);
        UsersMembersFiltered = UsersMembers;

        UsersNonMembers = users!.FindAll(u => u.UserGroupId != UserGroup.Id);
        UsersNonMembersFiltered = UsersNonMembers;

        ShowUserGroupMenu = true;
        StateHasChanged();
    }

    private async Task MoveUserToUserGroup(UserContract user)
    {
        if (user is null || UserGroup is null)
        {
            return;
        }

        if (await AdministrationService.MoveUserToUserGroup(user.Id, UserGroup!.Id))
        {
            await OnUserGroupChanged.InvokeAsync();
            UsersNonMembers!.Remove(user);
            UsersNonMembersFiltered = UsersNonMembers;
            UsersMembers!.Add(user);
            UsersMembersFiltered = UsersMembers;
            StateHasChanged();
        }
    }

    private async Task RemoveUserFromUserGroup(UserContract user)
    {
        if (user is null || UserGroup is null)
        {
            return;
        }

        if (await AdministrationService.RemoveUserFromUserGroup(user.Id, UserGroup!.Id))
        {
            await OnUserGroupChanged.InvokeAsync();
            UsersMembers!.Remove(user);
            UsersMembersFiltered = UsersMembers;
            UsersNonMembers!.Add(user);
            UsersNonMembersFiltered = UsersNonMembers;

            if(user.Id == UserGroup.LeaderId)
            {
                UserGroup.LeaderId = null;
            }

            StateHasChanged();
        }
    }

    private async Task UpdateUserGroupLeader(UserContract user)
    {
        if (user is null || UserGroup is null)
        {
            return;
        }

        if (await AdministrationService.UpdateUserGroupLeader(user.Id, UserGroup!.Id))
        {
            await OnUserGroupChanged.InvokeAsync();
            UserGroup.LeaderId = user.Id;
            StateHasChanged();
        }
    }

    private async Task DeleteUserGroup()
    {
        if (_deleteUserGroupConfirmation == false)
        {
            _deleteUserGroupConfirmation = true;
            return;
        }

        if (UserGroup is null)
        {
            return;
        }

        if (await AdministrationService.DeleteUserGroup(UserGroup!.Id))
        {
            await SaveAndToggleUserGroupMenu();
            await OnUserGroupChanged.InvokeAsync();
        }
    }

    private void ResetUserGroupDeleteConfirm()
    {
        _deleteUserGroupConfirmation = false;
    }

    private void SearchMember(string searched_user)
    {
        UsersMembersFiltered = UsersMembers!.FindAll(u => u.Name.Contains(searched_user));
    }

    private void SearchNonMember(string searched_user)
    {
        UsersNonMembersFiltered = UsersNonMembers!.FindAll(u => u.Name.Contains(searched_user));
    }

}