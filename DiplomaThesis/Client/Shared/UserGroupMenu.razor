@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@inject IAdministrationService AdministrationService

<div class="user_group_menu_container animate__animated animate__fadeIn" style="display: @(ShowUserGroupMenu ? "block" : "none");">
    <div class="user_group_menu">
        @if (UserGroup is null || UsersMembers is null || UsersNonMembers is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table_info">
                <tr>
                    <td class="label">ID</td>
                    <td>@UserGroup.Id</td>
                </tr>
                <tr>
                    <td class="label">Name</td>
                    <td>@UserGroup.Name</td>
                </tr>
            </table>

            <div class="section_header">Members</div>
            <input type="text" class="search" placeholder="Search and remove users..."
               @oninput="@((e) => SearchMember(e.Value!.ToString()!))">
            <div class="user_list">
                @foreach (var user in UsersMembersFiltered!)
                {
                    <div class="user animate__animated animate__fadeInUp">
                        <div class="name">@user.Name</div>
                        <button @onclick="() => RemoveUserFromUserGroup(user)">
                            <i class="material-icons icon">remove</i>
                        </button>
                    </div>
                }
            </div>

            <div class="section_header">Non members</div>
            <input type="text" class="search" placeholder="Search and add users..."
               @oninput="@((e) => SearchNonMember(e.Value!.ToString()!))">
            <div class="user_list">
                @foreach (var user in UsersNonMembersFiltered!)
                {
                    <div class="user animate__animated animate__fadeInDown">
                        <div class="name">@user.Name</div>
                        <button @onclick="() => MoveUserToUserGroup(user)">
                            <i class="material-icons icon">add</i>
                        </button>
                    </div>
                }
            </div>
        }
        <div class="bottom_menu">
            <div class="buttons">
                <button class="button_delete" @onclick="DeleteUserGroupButton" @onmouseout="ResetUserGroupDeleteConfirm">
                    @(_deleteUserGroupConfirmation ? "Are you sure?" : "Delete user group")
                </button>
                <button class="button_save" @onclick="ToggleUserGroupMenu">Save and close</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnUserGroupChanged { get; set; }

    private UserGroupContract? UserGroup { get; set; }
    private List<UserContract>? UsersMembers { get; set; }
    private List<UserContract>? UsersMembersFiltered { get; set; }
    private List<UserContract>? UsersNonMembers { get; set; }
    private List<UserContract>? UsersNonMembersFiltered { get; set; }

    public bool ShowUserGroupMenu { get; set; }

    private bool _deleteUserGroupConfirmation = false;

    public void ToggleUserGroupMenu()
    {
        ShowUserGroupMenu = !ShowUserGroupMenu;
        _deleteUserGroupConfirmation = false;
    }

    public async Task ShowUserGroup(UserGroupContract userGroup)
    {
        UserGroup = userGroup;
        ShowUserGroupMenu = true;

        var users = await AdministrationService.GetAllUsers();

        UsersMembers = users!.FindAll(u => u.UserGroupId == UserGroup.Id);
        UsersMembersFiltered = UsersMembers;

        UsersNonMembers = users!.FindAll(u => u.UserGroupId != UserGroup.Id);
        UsersNonMembersFiltered = UsersNonMembers;

        /*UsersMembers = await AdministrationService.GetUserGroupMembers(UserGroup!.Id);
        UsersMembersFiltered = UsersMembers;

        UsersNonMembers = await AdministrationService.GetUserGroupNonMembers(UserGroup!.Id);
        UsersNonMembersFiltered = UsersNonMembers;*/

        StateHasChanged();
    }

    private void SearchMember(string searched_user)
    {
        UsersMembersFiltered = UsersMembers!.FindAll(u => u.Name.Contains(searched_user));
    }

    private void SearchNonMember(string searched_user)
    {
        UsersNonMembersFiltered = UsersNonMembers!.FindAll(u => u.Name.Contains(searched_user));
    }

    private async Task MoveUserToUserGroup(UserContract user)
    {
        Console.WriteLine(UserGroup!.Id);
        if (await AdministrationService.MoveUserToUserGroup(user.Id, UserGroup!.Id))
        {
            await OnUserGroupChanged.InvokeAsync();
            var user_group = await AdministrationService.GetUserGroup(UserGroup!.Id);
            if (user_group is not null)
            {
                
                UserGroup = user_group;
                UsersNonMembers!.Remove(user);
                UsersNonMembersFiltered = UsersNonMembers;
                UsersMembers!.Add(user);
                UsersMembersFiltered = UsersMembers;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveUserFromUserGroup(UserContract user)
    {
        if (await AdministrationService.RemoveUserFromUserGroup(user.Id, UserGroup!.Id))
        {
            await OnUserGroupChanged.InvokeAsync();
            var user_group = await AdministrationService.GetUserGroup(UserGroup!.Id);
            if (user_group is not null)
            {
                UserGroup = user_group;
                UsersMembers!.Remove(user);
                UsersMembersFiltered = UsersMembers;
                UsersNonMembers!.Add(user);
                UsersNonMembersFiltered = UsersNonMembers;
                StateHasChanged();
            }
        }
    }

    private async Task DeleteUserGroupButton()
    {
        if (_deleteUserGroupConfirmation == false)
        {
            _deleteUserGroupConfirmation = true;
            return;
        }
        if (await AdministrationService.DeleteUserGroup(UserGroup!.Id))
        {
            ToggleUserGroupMenu();
            await OnUserGroupChanged.InvokeAsync();
        }
    }

    private void ResetUserGroupDeleteConfirm()
    {
        _deleteUserGroupConfirmation = false;
    }
    
}