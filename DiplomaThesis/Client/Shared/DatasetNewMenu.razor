@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using System.Data;

@inject IDatasetService DatasetService
@inject IFileParsingService Parser
@inject IAdministrationService AdministrationService
@inject IJSRuntime JSRuntime

<div class="dataset_menu_container animate__animated animate__fadeIn" style="display: @(ShowDatasetMenu ? "block" : "none");">
    <div class="dataset_menu">
        <div class="@(ShowFileFormatGuide ? "hidden" : "")">
            <div class="section_dataset_info animate__animated animate__fadeIn">
                <div class="section_header">New dataset preview</div>
                <table class="table_info">
                    <tr>
                        <td class="label">Name</td>
                        <td>@DatasetNewName</td>
                    </tr>
                </table>

                @if (DatasetFileLoadProgress == 0)
                {
                    <DragAndDropFileLoader OnFileLoaded=@LoadDatasetFile />
                }

                @if (DatasetFileLoadProgress == 1)
                {
                    <div class="container_loading_file animate__animated animate__fadeIn">
                        <LoaderSmall />
                        <span>Loading the file, please wait...</span>
                    </div>
                }

                @if (DatasetFileLoadProgress == 2 && DatasetNewListOfDict != null)
                {
                    <DatasetPreviewTable DatasetNewListOfDict="DatasetNewListOfDict" />
                }

                @if (DatasetFileLoadProgress == 3)
                {
                    <div class="container_uploading_file animate__animated animate__fadeIn">
                        <LoaderSmall />
                        <span>Uploading the file, please wait...</span>
                    </div>
                }

                @if (DatasetFileLoadProgress == 4)
                {
                    <div class="container_loading_file_wrong_format animate__animated animate__fadeIn">
                        <span>There seems to be an error in the file you are trying to load</span><br />
                        <span>Please check the file and try again</span>
                    </div>
                }

                <div class="bottom_menu">
                    <div class="group_left">
                        <button class="button_default" @onclick="ToggleFileFormatGuide">Format guide</button>
                    </div>
                    <div class="group_right">
                        @if (DatasetFileLoadProgress == 2 || DatasetFileLoadProgress == 4)
                        {
                            <button class="button_default animate__animated animate__fadeIn" @onclick="ResetDatasetFileUploadState">Choose another file</button>
                        }
                        @if (DatasetNewJson != null && DatasetNewJson != string.Empty)
                        {
                            <button class="button_default" @onclick="UploadNewDataset">Upload</button>
                        }

                        <button class="button_default" @onclick="SaveAndToggleDatasetMenu">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="@(ShowFileFormatGuide ? "" : "hidden")">
            <FileFormatGuide OnHide=ToggleFileFormatGuide />
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnDatasetChanged { get; set; }

    private DatasetContract? Dataset { get; set; }
    private List<Dictionary<string, string>>? DatasetNewListOfDict { get; set; }
    private string DatasetNewJson { get; set; } = string.Empty;
    private string DatasetNewName { get; set; } = string.Empty;

    public bool ShowDatasetMenu { get; set; }
    private bool ShowFileFormatGuide = false;
    private int DatasetFileLoadProgress = 0;
    private int DatasetFileMaxSize = 500 * 1024 * 1024; //500MB
    private const int DatasetPreviewMaxRows = 5;

    public async Task SaveAndToggleDatasetMenu()
    {
        ShowDatasetMenu = !ShowDatasetMenu;
        ResetDatasetFileUploadState();
    }

    public async Task Show()
    {
        ShowDatasetMenu = true;
        StateHasChanged();
    }

    private void ResetDatasetFileUploadState()
    {
        DatasetFileLoadProgress = 0;
        DatasetNewListOfDict = null;
        DatasetNewJson = string.Empty;
        ShowFileFormatGuide = false;
    }

    private async Task LoadDatasetFile(IBrowserFile datasetFile)
    {
        DatasetFileLoadProgress = 1;

        try
        {
            string datasetFileExtension = datasetFile.Name.Split(".").Last();
            DatasetNewName = datasetFile.Name.Split(".").First();
            DatasetNewJson = await Parser.ParseFileToJson(datasetFile, datasetFileExtension);
            DatasetNewListOfDict = await Parser.ParseJsonToListOfDict(DatasetNewJson);
            DatasetFileLoadProgress = 2;
        }
        catch
        {
            DatasetFileLoadProgress = 4;
            StateHasChanged();
            await Task.Delay(6000);
            DatasetFileLoadProgress = 0;
        }
    }

    private async Task UploadNewDataset()
    {
        if (DatasetNewJson == null || DatasetNewJson == string.Empty)
        {
            return;
        }

        DatasetFileLoadProgress = 3;

        if (await DatasetService.UploadNewDataset(DatasetNewName, DatasetNewJson))
        {
            await OnDatasetChanged.InvokeAsync();
            await SaveAndToggleDatasetMenu();
            return;
        }
    }

    public void ToggleFileFormatGuide()
    {
        ShowFileFormatGuide = !ShowFileFormatGuide;
    }
}
