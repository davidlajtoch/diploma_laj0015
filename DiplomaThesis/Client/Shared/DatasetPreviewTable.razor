@using System.Data;
@using System.Globalization;

@if (DatasetColumnTypes != null)
{
    <table class="table_dataset_preview animate__animated animate__fadeIn">
        <tr>
            @for (int i = 0; i < DatasetNewListOfDict[0].Keys.Count(); i++)
            {
                <th>
                    @DatasetNewListOfDict[0].ElementAt(i).Key :
                    <span class="text_light">@DatasetColumnTypes![i]</span>
                </th>
            }
        </tr>

        @for (int row = 0; row < DatasetNewListOfDict.Count; row++)
        {
            if (row >= DatasetPreviewMaxRows) break;

            <tr>
                @foreach (var columnValue in DatasetNewListOfDict[row].Values)
                {
                    <td>
                        @columnValue
                    </td>
                }
            </tr>
        }
        <tr>
            <td class="number_of_rows" colspan="@DatasetNewListOfDict[0].Keys.Count()">
                @NumberOfRows rows total
            </td>
        </tr>
    </table>
}

@code {
    [Parameter]
    public List<Dictionary<string, string>> DatasetNewListOfDict { get; set; }
    [Parameter]
    public EventCallback<List<string>> OnDatasetFileLoaded { get; set; }

    private List<string>? DatasetColumnTypes { get; set; }
    private const int DatasetPreviewMaxRows = 5;
    private const string DatasetNullValueString = "NULL";
    private int NumberOfRows = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetDatasetDataTableColumnTypes();
        StateHasChanged();
    }

    private async Task GetDatasetDataTableColumnTypes()
    {
        List<string> datasetColumnDatatypesList = new();

        foreach (KeyValuePair<string, string> entry in DatasetNewListOfDict[0])
        {
            datasetColumnDatatypesList.Add("String");
        }

        var numberOfRows = 0;
        for (int column = 0; column < DatasetNewListOfDict[0].Keys.Count(); column++)
        {
            bool isDateTime = true;
            bool isDouble = true;
            bool isBool = true;
            int row = 0;
            for (; row < DatasetNewListOfDict.Count; row++)
            {
                var columnValue = DatasetNewListOfDict[row].ElementAt(column).Value;

                if (columnValue.ToString() == string.Empty)
                {
                    continue;
                }
                if (!DateTime.TryParse(columnValue.ToString(), out _))
                {
                    isDateTime = false;
                }

                if (!double.TryParse(columnValue.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out _))
                {
                    isDouble = false;
                }

                if (!bool.TryParse(columnValue.ToString(), out _))
                {
                    isBool = false;
                }
            }
            if (isDateTime)
            {
                datasetColumnDatatypesList[column] = "DateTime";
                continue;
            }
            if (isDouble)
            {
                datasetColumnDatatypesList[column] = "Double";
                continue;
            }
            if (isBool)
            {
                datasetColumnDatatypesList[column] = "Bool";
                continue;
            }

            if(column == 0)
            {
                NumberOfRows = row;
            }
        }

        DatasetColumnTypes = datasetColumnDatatypesList;

        await OnDatasetFileLoaded.InvokeAsync(DatasetColumnTypes);
    }
}