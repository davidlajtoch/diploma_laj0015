@page "/data-sources"
@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Architect")]

@inject IDatasetService DatasetService
@inject IFileParsingService Parser

<PageTitle>Datasets</PageTitle>
<PageHeader Text="Datasets" />

@if (_datasets is null)
{
    <Loader />
}
else
{
    <div class="animate__animated animate__fadeIn">
        <div class="menu">
            <div class="group_left">
                <label class="button_input_file button_default">
                    New dataset
                    <InputFile OnChange="@(args => LoadFile(args, Guid.Empty))" />
                </label>
            </div>

            <div class="group_right">
                <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchDatasetByName(e.Value!.ToString()!))">
            </div>
        </div>
        <ul class="list_datasets">
            @foreach (var dataset in _datasets_searched!)
            {
                <li class="row">
                    <div class="col col-1" data-label="ID">@dataset.Id</div>
                    <div class="col col-2" data-label="Name">@dataset.Name</div>
                </li>

                <li class="dataset">
                    @if (dataset.ColumnNames.Any())
                    {
                        <strong>Dataset structure:</strong>
                        <br />
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Names</th>
                                    <th>Types</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var column in dataset.ColumnNames.Zip(dataset.ColumnTypes))
                                {
                                    <tr>
                                        <td>@column.First</td>
                                        <td>@column.Second</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <strong>Dataset not uploaded through this app.</strong>
                        <br />
                    }
                    <strong>Upload more rows:</strong><br />
                    <InputFile OnChange="@(args => LoadFile(args, dataset.Id))" />
                </li>
            }
        </ul>
        @if (_datasets.Count() == 0)
        {
            <div class="nothing_found">
                Nothing found :(
            </div>
        }
    </div>
}

@code {
    private List<DatasetContract>? _datasets { get; set; }
    private List<DatasetContract>? _datasets_searched { get; set; }
    private string SearchValue { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var datasets = await DatasetService.GetDatasets();
        _datasets = datasets;
        _datasets_searched = datasets;

        StateHasChanged();
    }

    private async Task LoadFile(InputFileChangeEventArgs e, Guid datasetId)
    {
        var file = e.File;
        var datasetFileContent = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
        string datasetJson;

        try
        {
            datasetJson = Parser.ParseToJson(datasetFileContent, e.File.Name.Split(".").Last());
            Console.WriteLine(datasetJson);
        }
        catch
        {
            Console.WriteLine("Exception");
            return;
        }


        if (datasetId.Equals(Guid.Empty))
        {
            if (await DatasetService.UploadNewDataset(e.File.Name.Split(".")[0], datasetJson)) _ = UpdateData();
        }
        else
        {
            if (await DatasetService.UploadRowsToDataset(datasetId, datasetJson)) _ = UpdateData();
        }
    }

    private void SearchDatasetByName(string searched_dataset_name)
    {
        if (searched_dataset_name is null)
        {
            return;
        }
        _datasets_searched = _datasets!.FindAll(d => d.Name.Contains(searched_dataset_name));
    }

}