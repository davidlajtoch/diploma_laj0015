@page "/data-sources"
@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Architect")]

@inject IDatasetService DatasetService
@inject IFileParsingService Parser

<PageTitle>Datasets</PageTitle>
<PageHeader Text="Datasets" />

@if (DatasetList is null)
{
    <Loader />
}
else
{
    <div class="animate__animated animate__fadeIn">
        <div class="menu">
            <div class="group_left">
                <label class="button_input_file_default button_default">
                    New dataset
                    <InputFile OnChange="@(args => LoadFile(args, Guid.Empty))" />
                </label>
            </div>

            <div class="group_right">
                <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchDatasetByName(e.Value!.ToString()!))">
            </div>
        </div>

        <ul class="list_datasets animate__animated animate__fadeIn">
            <li class="header">
                <div class="col col-1">ID</div>
                <div class="col col-1">Name</div>
                <div class="col col-1">Columns</div>
                <div class="col col-1">Uploaded through ReporTiny</div>
                <div class="col col-1"></div>
            </li>
            @foreach (var dataset in DatasetListFiltered!)
            {
                <li class="row">
                    <div class="col col-1" data-label="ID">@dataset.Id</div>
                    <div class="col col-1" data-label="Name">@dataset.Name</div>
                    <div class="col col-1" data-label="Columns">@dataset.ColumnNames.Count()</div>
                    <div class="col col-1" data-label="Uploaded through ReporTiny">@dataset.ColumnNames.Any()</div>
                    <div class="col col-1">
                        <button class="button_default" @onclick="() => DatasetMenu!.ShowDataset(dataset)">View / Add rows</button>
                    </div>
                </li>
            }
        </ul>

        <DatasetMenu @ref="DatasetMenu" OnDatasetChanged="UpdateData" />
    </div>
}

@code {
    private DatasetMenu? DatasetMenu = null!;

    private List<DatasetContract>? DatasetList { get; set; }
    private List<DatasetContract>? DatasetListFiltered { get; set; }
    private string SearchValue { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var datasets = await DatasetService.GetDatasets();
        DatasetList = datasets;
        DatasetListFiltered = datasets;

        StateHasChanged();
    }

    private async Task LoadFile(InputFileChangeEventArgs e, Guid datasetId)
    {
        var file = e.File;
        Console.WriteLine(file.ContentType);
        var datasetFileContent = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
        string datasetJson;


        if (datasetId.Equals(Guid.Empty))
        {
            Console.WriteLine("Database datasetId is Guid.Empty");
            //if (await DatasetService.UploadNewDataset(e.File.Name.Split(".")[0], datasetJson)) _ = UpdateData();
        }
        else
        {
            Console.WriteLine("Database datasetId is NOT Guid.Empty");
            //if (await DatasetService.UploadRowsToDataset(datasetId, datasetJson)) _ = UpdateData();
        }
    }

    private void SearchDatasetByName(string searched_dataset_name)
    {
        if (searched_dataset_name is null)
        {
            return;
        }
        DatasetListFiltered = DatasetList!.FindAll(d => d.Name.Contains(searched_dataset_name));
    }

}