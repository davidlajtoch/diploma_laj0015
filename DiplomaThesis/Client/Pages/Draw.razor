@page "/draw"

@using DiplomaThesis.Client.Services.Interfaces;
@using DiplomaThesis.Shared.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Authorization;

@using System.Text;

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAdministrationService AdministrationService
@inject IChatService ChatService
@inject IJSRuntime Js

@implements IAsyncDisposable;

@attribute [Authorize]

<PageTitle>Draw - ReporTiny</PageTitle>

@if (!UserInUserGroup)
{
    <div class="warning_no_user_group animate__animated animate__bounceIn animate__delay-2s">
        <i class="material-icons icon">report</i><br />
        You need to be in a user group to chat.
    </div>
}
else
{
    <div id="r_click_context_menu">
        <button id="ctx_button_copy"><i class="small material-icons">content_copy</i><span>Copy</span></button>
        <button id="ctx_button_paste"><i class="small material-icons">content_paste</i><span>Paste</span></button>
        <button id="ctx_button_bring_forward"><i class="small material-icons">arrow_upward</i><span>Bring forward</span></button>
        <button id="ctx_button_send_backwards"><i class="small material-icons">arrow_downward</i><span>Send backwards</span></button>
        <button id="ctx_button_group"><i class="small material-icons">link</i><span>Group</span></button>
        <button id="ctx_button_remove" class="button_danger"><i class="small material-icons">delete</i><span>Remove</span></button>
    </div>

    <div class="dialog" id="dialog_image_size">
        Maximum file size is 1MB!<br />
        <div class="dialog_buttons">
            <button class="btn_confirm" id="btn_image_size_confirm" type="button"><i class="material-icons">check</i></button>
        </div>
    </div>

    <div id="tool_box" class="tool_box">

        <div class="tb_item" id="options">
            <a class="tb_icon" id="tb_option_profile"><i class="material-icons">person</i></a>
            <a class="tb_icon" id="tb_option_whiteboards"><i class="material-icons">perm_media</i></a>
            <a class="tb_icon" id="tb_option_share"><i class="material-icons">share</i></a>
            <a class="tb_icon" id="tb_option_new"><i class="material-icons">add</i></a>
            <a class="tb_icon" id="tb_option_fullscreen"><i class="material-icons">fullscreen</i></a>
            <a class="tb_icon" id="tb_image_download"><i class="material-icons">file_download</i></a>
            <a class="tb_selected" id="tb_option_selected"><i class="material-icons color_changing">more_vert</i></a>
        </div>

        <div class="tb_item" id="tool">
            <a class="tb_icon" id="tb_tool_remover"><i class="material-icons">delete</i></a>
            <a class="tb_icon" id="tb_tool_text"><i class="material-icons">text_fields</i></a>
            <a class="tb_icon" id="tb_tool_color_picker"><i class="material-icons">colorize</i></a>
            <a class="tb_icon" id="tb_tool_bucket"><i class="material-icons">format_color_fill</i></a>
            <a class="tb_icon" id="tb_tool_recolor"><i class="material-icons">invert_colors</i></a>
            <a class="tb_icon" id="tb_tool_eraser"><i class="material-icons">gradient</i></a>
            <a class="tb_icon" id="tb_tool_ellipse"><i class="material-icons">panorama_fish_eye</i></a>
            <a class="tb_icon" id="tb_tool_rectangle"><i class="material-icons">crop_square</i></a>
            <a class="tb_icon" id="tb_tool_triangle"><i class="material-icons">change_history</i></a>
            <a class="tb_icon" id="tb_tool_line"><i class="material-icons">remove</i></a>
            <a class="tb_icon" id="tb_tool_pen"><i class="material-icons">gesture</i></a>
            <a class="tb_icon" id="tb_tool_move"><i class="material-icons">near_me</i></a>
            <a class="tb_selected" id="tb_tool_selected"><i class="material-icons">gesture</i></a>
        </div>

        <div class="tb_item" id="color">
            <a class="tb_icon tb_color" id="tb_color_grey"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_brown"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_red"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_purple"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_blue"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_green"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_icon tb_color" id="tb_color_yellow"><i class="material-icons">bubble_chart</i></a>
            <a class="tb_selected" id="tb_color_selected"><i class="material-icons">bubble_chart</i></a>
        </div>

        <div class="tb_item" id="line_width">
            <div class="line_width_slider_container">
                <input type="range" min="1" max="9" value="1" step="1" class="slider" id="line_width_range">
            </div>
            <a class="tb_selected" id="tb_line_width_selected"><span>1</span></a>
        </div>

        <div class="tb_item" id="upload">
            <input type="file" name="image_input" id="image_input" accept="image/png,image/jpeg" onclick="this.value=null;">
            <input type="file" name="pdf_input" id="pdf_input" accept="application/pdf" onclick="this.value=null;">
            <a class="tb_icon" id="tb_image_upload"><i class="material-icons">photo</i></a>
            <a class="tb_icon" id="tb_pdf_upload"><i class="material-icons">description</i></a>
            <a class="tb_selected" id="tb_image_selected"><i class="material-icons">file_upload</i></a>
        </div>

        <a class="toolbox_close_button"><i class="material-icons">chevron_left</i></a>
    </div>

    <div id="hint_box">
        <span></span>
    </div>

        <canvas class="whiteboard" id="whiteboard" style="z-index: 0; width: 100vw; height: 100vh;"></canvas>
}

@code {
    IJSObjectReference? _js;

    private HubConnection HubConnection;
    private UserGroupContract? UserGroup = null;
    private Guid UserId = new();
    private string? UserName = string.Empty;

    private bool UserInUserGroup = false;
    private bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    private bool canvasReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await Js.InvokeVoidAsync("loadJs", "./scripts/Whiteboard.js");
                await Task.Delay(1000);
                await Js.InvokeVoidAsync("loadJs", "./scripts/draw.js");
                await Task.Delay(1000);
                await Js.InvokeVoidAsync("connectDrawClient", UserGroup.Id.ToString());
                Console.WriteLine(UserGroup.Id.ToString());
                
            }
            
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSetUserIdAndName();

        UserGroup = await AdministrationService.GetUserUserGroup(UserId);
        if (UserGroup!.Id == Guid.Empty)
        {
            return;
        }

        UserInUserGroup = true;
        canvasReady = true;
    }

    private async Task GetSetUserIdAndName()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        UserId = Guid.Parse(userId!);
        UserName = user.Identity.Name;
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}