@page "/administration"
@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject IAdministrationService AdministrationService

    <PageTitle>ReporTiny - Administration</PageTitle>
    <PageHeader Text="Administration" />

    @if (_users is null || _user_groups is null)
    {
        <Loader />
    }
    else
    {
        <div class="animate__animated animate__fadeIn">
            <div class="menu">
                <div class="group_left">
                    <button class="@(_showUsers ? "selected" : "")" @onclick="() => _showUsers = true">Users</button>
                    <button class="@(!_showUsers ? "selected" : "")" @onclick="() => _showUsers = false">User groups</button>
                </div>

                <div class="group_right">
                    @if (_showUsers)
                    {
                        <input type="text" class="search" placeholder="Search by name..."
                            @oninput="@((e) => SearchUser(e.Value!.ToString()!))">
                    }
                    else
                    {
                            <div class="input_with_button_container">
                                <input @bind="_new_user_group_name" type="text" placeholder="Create new group...">
                                <button @onclick="CreateUserGroupButton"><i class="material-icons icon">add</i></button>
                            </div>
                            <input type="text" class="search" placeholder="Search by name..."
                                @oninput="@((e) => SearchUserGroup(e.Value!.ToString()!))">
                    }
                </div>
            </div>

                @if (_showUsers)
                {
                    <ul class="table_users">
                        <li class="header">
                            <div class="col col-1">ID</div>
                            <div class="col col-2">Name</div>
                            <div class="col col-3">Group</div>
                            <div class="col col-4">Roles</div>
                        </li>
                        @foreach (var user in _users_searched!)
                        {
                            <li class="row" @onclick="() => _userMenu.ShowUser(user)">
                                <div class="col col-1" data-label="ID">@user.Id</div>
                                <div class="col col-2" data-label="Name">@user.Name</div>
                                <div class="col col-3" data-label="Group">
                                    @if (user.UserGroupId.ToString() == Guid.Empty.ToString()){
                                        <div class="info_light">No group</div>
                                    }
                                    else{
                                        @_user_groups.FirstOrDefault(
                                            userGroup => userGroup?.Id.Equals(user.UserGroupId) ?? false, null
                                        )?.Name
                                    }
                                    
                                </div>
                                <div class="col col-4" data-label="Roles">
                                    @if(user.Roles.Count() == 0){
                                        <div class="info_light">No roles</div>
                                    }
                                    else{
                                        @foreach (var role in user.Roles)
                                        {
                                            <text>@role.Name&nbsp;</text>
                                        }
                                    }
                                    
                                </div>
                            </li>
                            
                        }
                    </ul>
                    <UserMenu @ref="_userMenu" OnUserChanged="UpdateData" />
                }
                else
                {
                    <ul class="table_groups">
                        <li class="header">
                            <div class="col col-1">ID</div>
                            <div class="col col-2">Name</div>
                            <div class="col col-3">Users</div>
                        </li>
                        @foreach (var user_group in _user_groups_searched!)
                        {
                            <li class="row" @onclick="() => _userGroupMenu.ShowUserGroup(user_group)">
                                <div class="col col-1" data-label="ID">@user_group.Id</div>
                                <div class="col col-2" data-label="Name">@user_group.Name</div>
                                <div class="col col-3" data-label="Users">@user_group.Users.Count()</div>
                            </li>
                            
                        }
                    </ul>
                    <UserGroupMenu @ref="_userGroupMenu" OnUserGroupChanged="UpdateData" />
                }
        </div>
    }


@code {
    private UserMenu _userMenu = null!;
    private UserGroupMenu _userGroupMenu = null!;

    private List<UserContract>? _users;
    private List<UserContract>? _users_searched;
    private List<UserGroupContract>? _user_groups;
    private List<UserGroupContract>? _user_groups_searched;

    private string _new_user_group_name = "";

    private bool _showUsers = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var users = await AdministrationService.GetAllUsers();
        var userGroups = await AdministrationService.GetAllUserGroups();

        if (users is not null)
        {
            _users = users;
            _users_searched = users;
        }

        if (userGroups is not null)
        {
            _user_groups = userGroups;
            _user_groups_searched = userGroups;
        }

        foreach(var userGroup in _user_groups)
        {
            Console.WriteLine(userGroup.Id);
        }

        StateHasChanged();
    }

    private async Task CreateUserGroupButton()
    {
        if(_new_user_group_name == "" || _new_user_group_name == null)
        {
            return;
        }

        if (await AdministrationService.CreateUserGroup(_new_user_group_name))
        {
            _new_user_group_name = "";
            await UpdateData();
        }
    }

    private void SearchUser(string searched_user)
    {
        if (searched_user is null)
        {
            return;
        }
        _users_searched = _users!.FindAll(u => u.Name.Contains(searched_user));
    }

    private void SearchUserGroup(string searched_user_group)
    {
        if (searched_user_group is null)
        {
            return;
        }
        _user_groups_searched = _user_groups.FindAll(ug => ug.Name.Contains(searched_user_group));
    }
}