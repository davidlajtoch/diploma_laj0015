@page "/administration"

@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject IAdministrationService AdministrationService

<PageTitle>ReporTiny - Administration</PageTitle>
<PageHeader Text="Administration" />

@if (Users is null || UserGroups is null)
{
    <Loader />
}
else
{
    <div class="animate__animated animate__fadeIn">
        <div class="page_main_menu_default">
            <div class="group_left">
                <button class="button_default @(ShowUsers ? "selected" : "")" @onclick="() => ShowUsers = true">Users</button>
                <button class="button_default @(!ShowUsers ? "selected" : "")" @onclick="() => ShowUsers = false">User groups</button>
            </div>

            <div class="group_right">
                @if (ShowUsers)
                {
                    <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchUser(e.Value!.ToString()!))">
                }
                else
                {
                    <div class="input_with_button_default input_with_button animate__animated animate__fadeIn">
                        <input @bind="NewUserGroupName" type="text" placeholder="Create new group...">
                        <button class="button1" @onclick="CreateUserGroupButton"><i class="material-icons icon">add</i></button>
                    </div>
                    <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchUserGroup(e.Value!.ToString()!))">
                }
            </div>
        </div>

        @if (ShowUsers)
        {
            @if (!UsersFiltered!.Any())
            {
                <div class="info_nothing_here_default vh_centered animate__animated animate__fadeIn">No users to display</div>
            }
            else
            {
                <ul class="list_default list_users animate__animated animate__fadeIn">
                    <li class="header">
                        <div class="col col_25">ID</div>
                        <div class="col col_25">Name</div>
                        <div class="col col_25">Group</div>
                        <div class="col col_25">Roles</div>
                    </li>
                    @foreach (var user in UsersFiltered!)
                    {
                        <li class="row selectable" @onclick="() => UserMenu.ShowUser(user)">
                            <div class="col col_25" data-label="ID">@user.Id</div>
                            <div class="col col_25" data-label="Name">@user.Name</div>
                            <div class="col col_25" data-label="Group">
                                @if (user.UserGroupId.ToString() == Guid.Empty.ToString())
                                {
                                    <div class="info_light">No group</div>
                                }
                                else
                                {
                                    @UserGroups.FirstOrDefault(
                userGroup => userGroup?.Id.Equals(user.UserGroupId) ?? false, null
                )?.Name
                                }

                            </div>
                            <div class="col col_25" data-label="Roles">
                                @if (user.Roles.Count() == 0)
                                {
                                    <div class="text_light">No roles</div>
                                }
                                else
                                {
                                    @foreach (var role in user.Roles)
                                    {
                                        <text>@role.Name&nbsp;</text>
                                    }
                                }

                            </div>
                        </li>

                    }
                </ul>
                <UserMenu @ref="UserMenu" OnUserChanged="UpdateData" />
            }
        }
        else
        {
            @if (!UserGroupsFiltered!.Any())
            {
                <div class="info_nothing_here_default vh_centered animate__animated animate__fadeIn">No user groups to display</div>
            }
            else
            {
                <ul class="list_default list_groups animate__animated animate__fadeIn">
                    <li class="header">
                        <div class="col col_25">ID</div>
                        <div class="col col_20">Name</div>
                        <div class="col col_20">Leader</div>
                        <div class="col col_20">Description</div>
                        <div class="col col_20">Users</div>
                    </li>
                    @foreach (var userGroup in UserGroupsFiltered!)
                    {
                        <li class="row selectable" @onclick="() => UserGroupMenu!.ShowUserGroup(userGroup)">
                            <div class="col col_25" data-label="ID">@userGroup.Id</div>
                            <div class="col col_20" data-label="Name">@userGroup.Name</div>
                            <div class="col col_20" data-label="Leader">
                                @if (userGroup.Users != null)
                                {
                                    @userGroup.Users.Where(u => u.Id == userGroup.LeaderId).Select(u => u.Name).DefaultIfEmpty(string.Empty).First()
                                }
                            </div>
                            <div class="col col_20" data-label="Name">@userGroup.Description</div>
                            <div class="col col_20" data-label="Users">@userGroup.Users.Count()</div>
                        </li>

                    }
                </ul>
                <UserGroupMenu @ref="UserGroupMenu" OnUserGroupChanged="UpdateData" />
            }
        }
    </div>
}


@code {
    private UserMenu? UserMenu = null!;
    private UserGroupMenu? UserGroupMenu = null!;

    private List<UserContract>? Users;
    private List<UserContract>? UsersFiltered;
    private List<UserGroupContract>? UserGroups;
    private List<UserGroupContract>? UserGroupsFiltered;

    private string NewUserGroupName = string.Empty;
    private bool ShowUsers = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var users = await AdministrationService.GetAllUsers();
        var userGroups = await AdministrationService.GetAllUserGroups();

        if (users is not null)
        {
            Users = users;
            UsersFiltered = users;
        }

        if (userGroups is not null)
        {
            UserGroups = userGroups;
            UserGroupsFiltered = userGroups;
        }

        StateHasChanged();
    }

    private async Task CreateUserGroupButton()
    {
        if (NewUserGroupName == string.Empty || NewUserGroupName == null)
        {
            return;
        }

        if (await AdministrationService.CreateUserGroup(NewUserGroupName))
        {
            NewUserGroupName = string.Empty;
            await UpdateData();
        }
    }

    private void SearchUser(string searched_user)
    {
        if (searched_user is null)
        {
            return;
        }
        UsersFiltered = Users!.FindAll(u => u.Name.Contains(searched_user));
    }

    private void SearchUserGroup(string searched_user_group)
    {
        if (searched_user_group is null)
        {
            return;
        }
        UserGroupsFiltered = UserGroups.FindAll(ug => ug.Name.Contains(searched_user_group));
    }
}