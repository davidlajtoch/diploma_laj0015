@page "/administration"
@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject IAdministrationService AdministrationService



    <PageTitle>Administration</PageTitle>
    <PageHeader Text="Administration" />

    @if (_users is null || _user_groups is null)
    {
        <Loader />
    }
    else
    {
        <div class="animate__animated animate__fadeIn">
            <div class="menu">
                <div class="buttons">
                    <button class="@(_showUsers ? "selected" : "")" @onclick="() => _showUsers = true">Users</button>
                    <button class="@(!_showUsers ? "selected" : "")" @onclick="() => _showUsers = false">User groups</button>
                    @if(_showUsers)
                    {

                    }
                </div>

                @if (_showUsers)
                {
                    <div class="search">
                        <input type="text" class="input_text" placeholder="Search by name..." @onkeydown="@FilterUsersWithEnter"
                       @bind="@users_search_value" @oninput="@((e) => { users_search_value=(string)e.Value;})">
                        <button class="button_search" @onclick="FilterUsers"><i class="material-icons icon">search</i></button>
                    </div>
                }
                else
                {
                    <div class="search">
                        <input type="text" class="input_text" placeholder="Search by name..." @onkeydown="@FilterUserGroupsWithEnter"
                       @bind="@user_groups_search_value" @oninput="@((e) => { user_groups_search_value=(string)e.Value;})">
                        <button class="button_search" @onclick="FilterUserGroups"><i class="material-icons icon">search</i></button>
                    </div>
                }
            </div>

            <div class="d-flex">
                @if (_showUsers)
                {
                    <div class="flex-column">
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Id</th>
                                <th>Name</th>
                                <th>Group</th>
                                <th>Roles</th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var user in _users)
                            {
                                <tr>
                                    <td>@user.Id</td>
                                    <td>@user.Name</td>
                                    <td>
                                        @_user_groups.FirstOrDefault(
                                            userGroup => userGroup?.Id.Equals(user.UserGroupId) ?? false, null
                                            )?.Name
                                    </td>
                                    <td>
                                        <div class="flex-column">
                                            @foreach (var role in user.Roles)
                                            {
                                                <text>@role.Name&nbsp;</text>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <button
                                            class="btn btn-outline-dark"
                                            @onclick="() => _userMenu.ShowUser(user)">
                                            Select
                                        </button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="flex-column">
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Id</th>
                                <th>Name</th>
                                <th>Users</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var userGroup in _user_groups)
                            {
                                <tr>
                                    <td>@userGroup.Id</td>
                                    <td>@userGroup.Name</td>
                                    <td>
                                        <div class="flex-column">
                                            @foreach (var userId in userGroup.Users)
                                            {
                                                <text>@_users.First(user => user.Id.Equals(userId)).Name&nbsp;</text>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                        <div class="flex-row">
                            <label>
                                <input placeholder="New user group name"
                                       @bind="_newUserGroupName"
                                       @bind:event="oninput"/>
                            </label>
                            <button class="btn btn-outline-dark"
                                    @onclick="CreateUserGroupButton">
                                Create
                            </button>
                        </div>
                    </div>
                }
            </div>
            <div>
                <UserMenu @ref="_userMenu" OnUserChanged="UpdateData"/>
            </div>
        </div>
    }


@code {
    private UserMenu _userMenu = null!;

    private UserContract[]? _users;
    private UserContract[]? _users_full;
    private UserGroupContract[]? _user_groups;
    private UserGroupContract[]? _user_groups_full;

    private string users_search_value { get; set; } = "";
    private string user_groups_search_value { get; set; } = "";

    private string _newUserGroupName = "";

    private bool _showUsers = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var users = await AdministrationService.GetUsers();
        var userGroups = await AdministrationService.GetUserGroups();

        if (users is not null)
        {
            _users = users;
            _users_full = users;
        }

        if (userGroups is not null)
        {
            _user_groups = userGroups;
            _user_groups_full = userGroups;
        }

        StateHasChanged();
    }

    private async Task CreateUserGroupButton()
    {
        if (await AdministrationService.CreateUserGroup(_newUserGroupName))
        {
            await UpdateData();
        }
    }

    public void FilterUsersWithEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            FilterUsers();
        }
    }

    private void FilterUsers()
    {
        if (_users != null)
        {
            _users = _users_full;
            _users = Array.FindAll(_users, s => s.Name.Contains(users_search_value));
        }
    }

    public void FilterUserGroupsWithEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            FilterUserGroups();
        }
    }

    private void FilterUserGroups()
    {
        if (_user_groups != null)
        {
            _user_groups = _user_groups_full;
            _user_groups = Array.FindAll(_user_groups, s => s.Name.Contains(user_groups_search_value));
        }
    }
}