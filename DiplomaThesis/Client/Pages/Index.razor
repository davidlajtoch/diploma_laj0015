@page "/"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DiplomaThesis.Client.Services.Interfaces
@using DiplomaThesis.Shared.Contracts

@inject SignOutSessionStateManager SignOutManager
@inject NavigationManager Navigation
@inject IActivityService ActivityService

<PageTitle>Home - ReporTiny</PageTitle>

@if (_activityAll is null || _activityUserGroup is null)
{
    <Loader />
}
else
{
    <div class="animate__animated animate__fadeIn">
        <LogoAnimatedLarge />

        <div class="about">
            The tiniest PowerBI client
        </div>

        <div class="buttons">
            <AuthorizeView>
                <Authorized>
                    <a @onclick="BeginSignOut">Log out</a>
                </Authorized>
                <NotAuthorized>
                    <a href="authentication/register">Register</a>
                    <a href="authentication/login">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <AuthorizeView>
            <Authorized>
            </Authorized>
        </AuthorizeView>

        <PageHeader Text="Recent activity" />

        <div class="menu">
            <div class="group_left">
                <button class="button_default @(_showUserGroupActivity ? "selected" : "")" @onclick="() => _showUserGroupActivity = true">Activity in my group</button>
                <button class="button_default @(!_showUserGroupActivity ? "selected" : "")" @onclick="() => _showUserGroupActivity = false">All activity</button>
            </div>

            <div class="group_right">
                @if (_showUserGroupActivity)
                {
                    <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchAllActivity(e.Value!.ToString()!))">
                }
                else
                {
                    <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchAllActivity(e.Value!.ToString()!))">
                }
            </div>
        </div>

        @if (_showUserGroupActivity)
        {
            <ul class="list_activity">
                <li class="header">
                    <div class="col col-1">Activity</div>
                    <div class="col col-2">User Group</div>
                    <div class="col col-3">Created</div>
                </li>
                @foreach (var activity in _activityUserGroupSearched!)
                {
                    <li class="row">
                        <div class="col col-1" data-label="Activity">@activity.Message</div>
                        <div class="col col-2" data-label="User Group">@activity.UserGroup!.Name</div>
                        <div class="col col-3" data-label="Created">@activity.Created</div>
                    </li>

                }
            </ul>
        }
        else
        {
            <ul class="list_activity">
                <li class="header">
                    <div class="col col-1">Activity</div>

                    <div class="col col-3">Created</div>
                </li>
                @foreach (var activity in _activityAllSearched!)
                {
                    <li class="row">
                        <div class="col col-1" data-label="Activity">@activity.Message</div>

                        <div class="col col-3" data-label="Created">@activity.Created</div>
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    private List<ActivityContract>? _activityAll;
    private List<ActivityContract>? _activityAllSearched;
    private List<ActivityContract>? _activityUserGroup;
    private List<ActivityContract>? _activityUserGroupSearched;

    private bool _showUserGroupActivity = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var activityAll = await ActivityService.GetAllActivity();

        if (activityAll is not null)
        {
            _activityAll = activityAll;
            _activityAllSearched = activityAll;
            _activityUserGroup = activityAll;
            _activityUserGroupSearched = activityAll;
        }

        StateHasChanged();
    }

    private void SearchAllActivity(string searched_string)
    {
        if (searched_string is null)
        {
            return;
        }
        _activityAllSearched = _activityAll!.FindAll(a => 
            a.Message.Contains(searched_string) || 
            a.UserGroup!.Name.Contains(searched_string) ||
            a.Created.ToString()!.Contains(searched_string));
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}