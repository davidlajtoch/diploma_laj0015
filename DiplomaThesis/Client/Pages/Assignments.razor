@page "/assignments"

@using DiplomaThesis.Client.Services.Interfaces;
@using DiplomaThesis.Shared.Contracts;
@using Microsoft.AspNetCore.Authorization;

@using System.Text;

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAdministrationService AdministrationService;
@inject IAssignmentService AssignmentService;

@attribute [Authorize]

<PageTitle>Assignments - ReporTiny</PageTitle>


@if (!UserInUserGroup)
{
    <div class="warning_no_user_group animate__animated animate__bounceIn animate__delay-2s">
        <i class="material-icons icon">report</i><br />
        You need to be in a user group to view assignments.
    </div>
}
else
{
    <div class="container animate__animated animate__fadeIn">
        <PageHeader Text="@(UserGroup!.Name + " assignments")" />
        <div class="menu">
            <div class="group_left">
            </div>

            <div class="group_right">
                @if (UserUserGroupLeader)
                {
                    <div class="input_with_button_default input_with_button">
                        <input @bind="NewAssignmentName" type="text" placeholder="Create new assignment...">
                        <button class="button1" @onclick="CreateAssignment"><i class="material-icons icon">add</i></button>
                    </div>
                }

                <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchAssignmentByName(e.Value!.ToString()!))">
            </div>
        </div>

        <div class="container_sections">
            <div class="section_left">
                @for (int i = 0; i < AssignmentLists.Count(); i++)
                {
                    <div class="container_subsection">
                        @if (AssignmentLists[i] != null || AssignmentLists[i].Count() != 0)
                        {
                            <div class="subsection_header">
                                @AssignmentCategories.ElementAt(i).Value <span class="text_light">@AssignmentLists[i].Count()</span>
                            </div>
                            <div class="subsection">
                                <div class="list_assignments">
                                    @foreach (var assignment in AssignmentLists[i])
                                    {
                                        <div class="container_assignment animate__animated animate__fadeIn">
                                            <button class="button_step_decrease" @onclick="() => UpdateAssignmentStep(assignment, -1)"
                                    disabled="@((assignment.Step == AssignmentCategories.Keys.First())? true : false)">
                                                <i class="material-icons icon">chevron_left</i>
                                            </button>
                                            <div class="assignment urgency@(assignment.Urgency)" @onclick="() => SelectAssignment(assignment)">
                                                <div class="name">@assignment.Name</div>
                                                <div class="created">@assignment.Created</div>
                                                <div class="description">@assignment.Description</div>
                                                <div class="assignee">
                                                    @if (assignment.User != null)
                                                    {
                                                        @assignment.User.Name
                                                    }
                                                    else
                                                    {
                                                        <span class="text_light">Not assigned</span>
                                                    }
                                                </div>
                                            </div>
                                            <button class="button_step_increase" @onclick="() => UpdateAssignmentStep(assignment, 1)"
                                    disabled="@((assignment.Step == AssignmentCategories.Keys.Last())? true : false)">
                                                <i class="material-icons icon">chevron_right</i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            <div class="section_right">
                @if (UserUserGroupLeader && SelectedAssignment != null)
                {
                    <div class="section_header">Name</div>
                    <input type="text" class="input_search_default input_search nohover" placeholder="Name this assignment..." @bind="AssignmentName">

                    <div class="section_header">Description</div>
                    <textarea name="textarea" class="textarea_default textarea" placeholder="Describe this assignment..." @bind="AssignmentDescription"></textarea>

                    <div class="section_header">Assignee</div>
                    <div class="assignee">
                        @if (SelectedAssignment.User == null)
                        {

                            <div class="name text_light animate__animated animate__fadeInDown">No user assigned</div>
                        }
                        else
                        {
                            <div class="name animate__animated animate__fadeInUp">@SelectedAssignment.User.Name</div>
                            <button class="button_tiny_default animate__animated animate__fadeInUp" @onclick="() => RemoveUserFromAssignment(SelectedAssignment!)">
                                <i class="material-icons icon">remove</i>
                            </button>
                        }
                    </div>

                    <input type="text" class="input_search_default input_search nohover" placeholder="Search and select Assignee..."
                   @oninput="@((e) => SearchUserByName(e.Value!.ToString()!))">
                    <div class="list_users">
                        @foreach (var user in UserGroupMembersFiltered!)
                        {
                            if (SelectedAssignment.User != null && user.Id == SelectedAssignment!.User.Id) { continue; }
                            <div class="user" @onclick="()=> AddUserToAssignment(SelectedAssignment!, user)">
                                @user.Name
                            </div>
                        }
                    </div>
                    <div class="section_header">Urgency</div>
                    <div class="urgency">
                        <button class="button_circle_default button_circle @((SelectedAssignment.Urgency == 0)? "urgency0" : "")" @onclick="() => UpdateAssignmentUrgency(SelectedAssignment!, 0)">0</button>
                        <button class="button_circle_default button_circle @((SelectedAssignment.Urgency == 1)? "urgency1" : "")" @onclick="() => UpdateAssignmentUrgency(SelectedAssignment!, 1)">1</button>
                        <button class="button_circle_default button_circle @((SelectedAssignment.Urgency == 2)? "urgency2" : "")" @onclick="() => UpdateAssignmentUrgency(SelectedAssignment!, 2)">2</button>
                    </div>

                    <div class="bottom_menu">
                        <button class="button_warning" @onclick="() => DeleteAssignment(SelectedAssignment)" @onmouseout="ResetAssignmentDeleteConfirm">
                            @(DeleteAssignmentConfirmation ? "Are you sure?" : "Delete assignment")
                        </button>
                        <button class="button_default" @onclick="() => SaveAll(SelectedAssignment!, AssignmentName, AssignmentDescription)">Save</button>
                    </div>
                }


                @if (!UserUserGroupLeader && SelectedAssignment != null)
                {
                    <table class="table_info">
                        <tr>
                            <td class="label">Name</td>
                            <td>@SelectedAssignment.Name</td>
                        </tr>
                        <tr>
                            <td class="label">Created</td>
                            <td>@SelectedAssignment.Created</td>
                        </tr>
                        <tr>
                            <td class="label">Assignee</td>
                            @if (@SelectedAssignment.User != null)
                            {
                                <td>@SelectedAssignment.User.Name</td>
                            }
                            else
                            {
                                <td class="text_light animate__animated animate__fadeInDown">No user assigned</td>
                            }

                        </tr>
                        <tr>
                            <td class="label">Urgency</td>
                            <td>@SelectedAssignment.Urgency</td>
                        </tr>
                    </table>

                    <div class="section_header">Description</div>
                    <div class="description">
                        @SelectedAssignment.Description
                    </div>

                    <div class="bottom_menu">
                        <button class="button_default" @onclick="() => AddUserToAssignment(SelectedAssignment!, UserId)">Assign to me</button>
                    </div>
                }

                @if (SelectedAssignment == null)
                {
                    <div class="notification_nothing_here">Select an assignment to view it's detail...</div>
                }

            </div>
        </div>
    </div>
}

@code {
    private List<AssignmentContract> AssignmentsUserGroup = new();
    private List<UserContract> UserGroupMembers = new();
    private List<UserContract> UserGroupMembersFiltered = new();
    private UserGroupContract? UserGroup = null;
    private Guid UserId = new();
    private string UserName = string.Empty;

    private List<List<AssignmentContract>> AssignmentLists = new List<List<AssignmentContract>>();

    private Dictionary<int, string> AssignmentCategories = new Dictionary<int, string>
    {
        {0, "To do" },
        {1, "In progress" },
        {2, "Done" },
    };

    private string NewAssignmentName = string.Empty;
    private string AssignmentName = string.Empty;
    private string AssignmentDescription = string.Empty;
    private string AssignmentUserName = string.Empty;
    private AssignmentContract? SelectedAssignment { get; set; }

    private bool UserInUserGroup = false;
    private bool UserUserGroupLeader = false;
    private bool DeleteAssignmentConfirmation = false;

    private async Task UpdateData()
    {
        AssignmentsUserGroup = await AssignmentService.GetUserGroupAssignments(UserGroup!.Id);
        CategorizeAssignments();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSetUserId();
        UserGroup = await AdministrationService.GetUserUserGroup(UserId);

        if (UserGroup!.Id == Guid.Empty)
        {
            return;
        }

        if (UserGroup.LeaderId == UserId)
        {
            UserUserGroupLeader = true;
        }

        await GetSetUserGroupMembers();

        AssignmentsUserGroup = await AssignmentService.GetUserGroupAssignments(UserGroup.Id);
        CategorizeAssignments();

        UserInUserGroup = true;
        Console.WriteLine(UserUserGroupLeader);
    }

    private async Task GetSetUserId()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        UserId = Guid.Parse(userId!);
        UserName = user!.Identity!.Name!;
    }

    private async Task GetSetUserGroupMembers()
    {
        UserGroupMembers = await AdministrationService.GetUserGroupMembers(UserGroup.Id);
        UserGroupMembersFiltered = UserGroupMembers!;
    }

    private void CategorizeAssignments()
    {
        if (AssignmentLists.Count() == AssignmentCategories.Count())
        {
            foreach (KeyValuePair<int, string> assignmentCategory in AssignmentCategories)
            {
                AssignmentLists[assignmentCategory.Key] = AssignmentsUserGroup!.FindAll(a => a.Step == assignmentCategory.Key);
            }
            return;
        }

        foreach (KeyValuePair<int, string> assignmentCategory in AssignmentCategories)
        {
            AssignmentLists.Add(AssignmentsUserGroup!.FindAll(a => a.Step == assignmentCategory.Key));
        }
    }

    private void SelectAssignment(AssignmentContract assignment)
    {
        SelectedAssignment = assignment;
        AssignmentName = assignment.Name;
        AssignmentDescription = assignment.Description;

    }

    private async Task SaveAll(AssignmentContract assignment, string name, string description)
    {
        await UpdateAssignmentName(assignment, name);
        await UpdateAssignmentDescription(assignment, description);
    }

    private async Task CreateAssignment()
    {
        if (NewAssignmentName == string.Empty || NewAssignmentName == string.Empty)
        {
            return;
        }

        var result = await AssignmentService.CreateAssignment(NewAssignmentName, UserGroup!.Id);

        if (result != null)
        {
            NewAssignmentName = string.Empty;
            AssignmentLists[0].Add(result);
            StateHasChanged();
        }
    }

    private async Task UpdateAssignmentStep(AssignmentContract assignment, int byValue)
    {
        if (NewAssignmentName == null ||
           (assignment.Step + byValue) < AssignmentCategories.Keys.First() ||
           (assignment.Step + byValue) > AssignmentCategories.Keys.Last())
        {
            return;
        }

        if (byValue != -1 && byValue != 1)
        {
            return;
        }

        if (await AssignmentService.UpdateAssignmentStep(assignment.Id, byValue))
        {
            AssignmentLists[assignment.Step].Remove(assignment);
            assignment.Step += byValue;
            AssignmentLists[assignment.Step].Add(assignment);
            StateHasChanged();
        }
    }

    private async Task UpdateAssignmentUrgency(AssignmentContract assignment, int urgency)
    {
        if (SelectedAssignment!.Urgency == urgency)
        {
            return;
        }

        if (urgency != 0 && urgency != 1 && urgency != 2)
        {
            return;
        }

        if (await AssignmentService.UpdateAssignmentUrgency(assignment.Id, urgency))
        {
            SelectedAssignment.Urgency = urgency;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.Urgency = urgency;
            StateHasChanged();
        }
    }

    private async Task UpdateAssignmentDescription(AssignmentContract assignment, string description)
    {
        if (SelectedAssignment == null)
        {
            return;
        }

        if (SelectedAssignment!.Description == description)
        {
            return;
        }

        if (await AssignmentService.UpdateAssignmentDescription(assignment.Id, description))
        {
            SelectedAssignment.Description = description;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.Description = description;
            StateHasChanged();
        }
    }

    private async Task UpdateAssignmentName(AssignmentContract assignment, string name)
    {
        if (SelectedAssignment == null)
        {
            return;
        }

        if (SelectedAssignment!.Name == name)
        {
            return;
        }

        if (await AssignmentService.UpdateAssignmentName(assignment.Id, name))
        {
            SelectedAssignment.Name = name;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.Name = name;
            StateHasChanged();
        }
    }

    private async Task AddUserToAssignment(AssignmentContract assignment, UserContract user)
    {
        if (assignment == null || user == null || assignment.User == user)
        {
            return;
        }

        if (await AssignmentService.AddUserToAssignment(assignment.Id, user.Id))
        {
            SelectedAssignment!.User = user;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.User = user;
            StateHasChanged();
        }
    }

    private async Task AddUserToAssignment(AssignmentContract assignment, Guid userId)
    {
        if (assignment == null || userId == Guid.Empty)
        {
            return;
        }

        if (assignment.User != null && assignment.User.Id == userId)
        {
            return;
        }

        if (await AssignmentService.AddUserToAssignment(assignment.Id, userId))
        {
            var user = new UserContract
                {
                    Id = Guid.Empty,
                    Name = UserName,
                    UserGroupId = UserGroup!.Id
                };
            SelectedAssignment!.User = user;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.User = user;
            StateHasChanged();
        }
    }

    private async Task RemoveUserFromAssignment(AssignmentContract assignment)
    {
        if (assignment == null)
        {
            return;
        }

        if (await AssignmentService.RemoveUserFromAssignment(assignment.Id))
        {
            SelectedAssignment!.User = null;
            AssignmentLists[assignment.Step].Where(a => a.Id == assignment.Id).FirstOrDefault()!.User = null;
            StateHasChanged();
        }
    }

    private async Task DeleteAssignment(AssignmentContract assignment)
    {
        if (assignment == null)
        {
            return;
        }

        if (DeleteAssignmentConfirmation == false)
        {
            DeleteAssignmentConfirmation = true;
            return;
        }

        if (await AssignmentService.DeleteAssignment(assignment.Id))
        {
            SelectedAssignment = null;
            AssignmentLists[assignment.Step].RemoveAll(a => a.Id == assignment.Id);
            StateHasChanged();
        }
    }

    private void ResetAssignmentDeleteConfirm()
    {
        DeleteAssignmentConfirmation = false;
    }

    private void SearchAssignmentByName(string searchedAssignment)
    {
        if (searchedAssignment == string.Empty || searchedAssignment == null)
        {
            return;
        }
    }

    private void SearchUserByName(string searchedUser)
    {
        if (searchedUser == string.Empty || searchedUser == null)
        {
            return;
        }

        UserGroupMembersFiltered = UserGroupMembers!.FindAll(u => u.Name.Contains(searchedUser));
    }
}
