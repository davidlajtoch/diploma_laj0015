@page "/assignments"

@using DiplomaThesis.Client.Services.Interfaces;
@using DiplomaThesis.Shared.Contracts;
@using Microsoft.AspNetCore.Authorization;

@using System.Text;

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAdministrationService AdministrationService;
@inject IAssignmentService AssignmentService;

@attribute [Authorize]

<PageTitle>Assignments - ReporTiny</PageTitle>

@if (!UserInUserGroup)
{
    <div class="warning_no_user_group animate__animated animate__bounceIn animate__delay-2s">
        <i class="material-icons icon">report</i><br />
        You need to be in a user group to view assignments.
    </div>
}
else
{
    <PageHeader Text="@(UserGroup!.Name + " assignments")" />
    <div class="container animate__animated animate__fadeIn">
        <div class="menu">
            <div class="group_left">
            </div>

            <div class="group_right">
                <div class="input_with_button_default input_with_button">
                    <input @bind="NewAssignmentName" type="text" placeholder="Create new assignment...">
                    <button class="button1" @onclick="CreateAssignment"><i class="material-icons icon">add</i></button>
                </div>
                <input type="text" class="input_search_default" placeholder="Search by name..."
                   @oninput="@((e) => SearchAssignmentByName(e.Value!.ToString()!))">
            </div>
        </div>

        <div class="section">
            <div class="container_list_assignments">
                <div class="section_header">To Do</div>
                <div class="list_assignments">
                    @foreach (var assignment in AssignmentsUserGroupToDo)
                    {
                        @assignment.Name <br />
                        @assignment.Created
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AssignmentContract> AssignmentsUserGroup = new();
    private List<AssignmentContract> AssignmentsUserGroupToDo = new();
    private List<AssignmentContract> AssignmentsUserGroupInProgress = new();
    private List<AssignmentContract> AssignmentsUserGroupDone = new();
    private List<UserContract> UserGroupMembers = new();
    private UserGroupContract? UserGroup = null;
    private Guid UserId = new();

    private string NewAssignmentName = string.Empty;

    private bool UserInUserGroup = false;
    private bool UserUserGroupLeader = false;

    private async Task UpdateData()
    {
        AssignmentsUserGroup = await AssignmentService.GetUserGroupAssignments(UserGroup!.Id);
        CategorizeAssignments();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSetUserId();
        Console.WriteLine("got user id");
        UserGroup = await AdministrationService.GetUserUserGroup(UserId);
        Console.WriteLine("got user group");

        if (UserGroup!.Id == Guid.Empty)
        {
            return;
        }
        Console.WriteLine("user group not empty");
        if(UserGroup.LeaderId == UserId)
        {
            UserUserGroupLeader = true;
        }
        Console.WriteLine("user group leader set");
        AssignmentsUserGroup = await AssignmentService.GetUserGroupAssignments(UserGroup.Id);
        Console.WriteLine("got assignments");
        CategorizeAssignments();
        Console.WriteLine("categorized assignments");

        UserInUserGroup = true;
        Console.WriteLine("cuser in user group true");
    }

    private async Task GetSetUserId()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        UserId = Guid.Parse(userId!);
    }

    private async Task GetSetUserGroupMembers()
    {
        UserGroupMembers = await AdministrationService.GetUserGroupMembers(UserGroup.Id);
        UserGroupMembers = UserGroupMembers!.FindAll(u => u.Id != UserId);
    }

    private void CategorizeAssignments()
    {
        AssignmentsUserGroupToDo = AssignmentsUserGroup!.FindAll(a => a.Step == 0);
        AssignmentsUserGroupInProgress = AssignmentsUserGroup!.FindAll(a => a.Step == 1);
        AssignmentsUserGroupDone = AssignmentsUserGroup!.FindAll(a => a.Step == 2);
    }

    private async Task CreateAssignment()
    {
        if (NewAssignmentName == string.Empty || NewAssignmentName == string.Empty)
        {
            return;
        }

        var result = await AssignmentService.CreateAssignment(NewAssignmentName, UserGroup!.Id);

        if (result != null)
        {
            NewAssignmentName = string.Empty;
            AssignmentsUserGroupToDo.Add(result);
            StateHasChanged();
        }
    }

    private void SearchAssignmentByName(string searchedAssignment)
    {
        if (searchedAssignment == string.Empty || searchedAssignment == null)
        {
            return;
        }
    }
}
