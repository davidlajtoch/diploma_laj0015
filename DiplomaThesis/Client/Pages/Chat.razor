@page "/chat"

@using DiplomaThesis.Client.Services.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@using DiplomaThesis.Shared.Contracts;
@using Microsoft.AspNetCore.Authorization;

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAdministrationService AdministrationService
@inject IChatService ChatService

@implements IAsyncDisposable;

@attribute [Authorize]

<PageTitle>Chat - ReporTiny</PageTitle>

@if (!UserInUserGroup)
{
    <div class="warning_no_user_group animate__animated animate__bounceIn animate__delay-2s">
        <i class="material-icons icon">report</i><br />
        You need to be in a user group to chat.
    </div>
}
else
{
    <div class="container animate__animated animate__fadeIn">
        <div class="section_left">
            <div class="list_users">
                @foreach (var user in UserGroup!.Users!)
                {
                    <div class="user">
                        @user.Name
                    </div>
                }
            </div>
        </div>

        <div class="section_right">
            <div class="list_messages">
                @if (!UserMessages.Any())
                {
                    <p>No messages</p>
                }
                else
                {
                    @foreach (var userMessage in UserMessages)
                    {
                        <div>
                            @userMessage.DateSent <br />
                            @userMessage.UserId <br />
                            @userMessage.UserName <br />
                            @userMessage.Message <br /> <br />
                        </div>
                    }
                }
            </div>
            <div class="inputs">
                <input type="text" class="input_search_default" placeholder="Type a message..."
                   @bind="MessageInput" />
                <button class="button_default" @onclick="SendMessage" disabled="@IsConnected"><i class="material-icons icon">send</i></button>
            </div>
        </div>

    </div>
}


@code {
    private HubConnection HubConnection;
    private List<UserGroupMessageContract> UserMessages = new();
    private Guid UserId;
    private string? UserName = null;
    private UserGroupContract? UserGroup = null;

    private string MessageInput = string.Empty;

    private bool UserInUserGroup = false;
    public bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        UserId = GetUserId().Result;
        UserName = GetUserName().Result;
        UserGroup = await AdministrationService.GetUserUserGroup(UserId);

        if (UserGroup!.Id == Guid.Empty)
        {
            return;
        }
        UserInUserGroup = true;

        HubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        HubConnection.On<UserGroupMessageContract>("RecieveMessage", (UserGroupMessageContract userMessage) =>
        {
            UserMessages.Add(userMessage);
            StateHasChanged();
        });

        await HubConnection.StartAsync();

        await AddUserToHubGroup();

        UserMessages = await ChatService.GetUserGroupMessages(UserGroup.Id);
    }

    private async Task<Guid> GetUserId()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        return Guid.Parse(userId!);
    }

    private async Task<string> GetUserName()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userName = user.Identity.Name;
        return userName!;
    }

    private async Task AddUserToHubGroup()
    {
        await HubConnection.SendAsync("AddToGroup", UserGroup.Id.ToString());
    }

    private async Task SendMessage()
    {

        if (!string.IsNullOrEmpty(MessageInput))
        {
            var userMessage = new UserGroupMessageContract { UserId = UserId, UserName = UserName, Message = MessageInput, DateSent = DateTime.Now, UserGroupId = UserGroup.Id };
            await HubConnection.SendAsync("SendMessage", userMessage, UserGroup.Id.ToString());

            await ChatService.AddUserGroupMessage(userMessage);

            MessageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}
