@page "/chat"

@using DiplomaThesis.Client.Services.Interfaces;
@using DiplomaThesis.Shared.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Authorization;

@using System.Text;

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAdministrationService AdministrationService
@inject IChatService ChatService

@implements IAsyncDisposable;

@attribute [Authorize]

<PageTitle>Chat - ReporTiny</PageTitle>

@if (!UserInUserGroup)
{
    <div class="warning_no_user_group animate__animated animate__bounceIn animate__delay-2s">
        <i class="material-icons icon">report</i><br />
        You need to be in a user group to chat.
    </div>
}
else
{
    <PageHeader Text="@(UserGroup!.Name + " chat room")" />
    <div class="container animate__animated animate__fadeIn">
        <div class="section_left">
            <div class="container_list_users">
                <div class="section_subheader">Connected group members</div>
                <div class="list_users">
                    @foreach (var user in UserGroupMembers!)
                    {
                        if (UsersChatConnected.Contains(user.Id))
                        {
                            <div class="user">
                                <div class="name">@user.Name</div>
                                <div class="status">
                                    <span class="connected"></span>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="section_subheader">Disconnected group members</div>
                <div class="list_users">
                    @foreach (var user in UserGroupMembers!)
                    {
                        if (!UsersChatConnected.Contains(user.Id))
                        {
                            <div class="user">
                                <div class="name">@user.Name</div>
                                <div class="status">
                                    <span class="disconnected"></span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="section_right">
            <div class="container_list_messages">
                <div class="list_messages">
                    @if (!UserMessages.Any())
                    {
                        <div class="notification_no_messages">No messages yet...</div>
                    }
                    else
                    {
                        @for (int i = UserMessages.Count - 1; i >= 0; i--)
                        {
                            <div class="row">
                                <div class="message @((UserMessages[i].UserId == UserId) ? "message_current_user" : "message_other_user")">
                                    <div class="info">
                                        <div class="user_name">@UserMessages[i].UserName</div>
                                        <div class="time_sent">@UserMessages[i].DateSent</div>
                                    </div>
                                    <div class="text">@UserMessages[i].Message</div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="inputs">
                @if (ShowEmojiMenu)
                {
                    <div class="menu_emoji animate__animated animate__bounceIn">
                        @foreach (var emoji in emojiMap)
                        {
                            <button class="button_emoji" @onclick="(() => InsertEmoji(emoji.Value))">
                                <span class="emoji">@emoji.Value</span><br />
                                <span class="text">@emoji.Key</span>
                            </button>
                        }
                    </div>
                }

                <form @onsubmit="SendMessage">
                    <div class="input_with_button_default input_with_button">
                        <input class="nohover" @bind="MessageInput" @bind:event="oninput" @onkeypress="FindAndReplaceEmoji" type="text" placeholder="Write a message...">
                        <button type="button" class="button2" @onclick="ToggleEmojiMenu"><i class="material-icons icon">insert_emoticon</i></button>
                        <button class="button1"><i class="material-icons icon">send</i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection HubConnection;
    private List<UserGroupMessageContract> UserMessages = new();
    private List<UserContract> UserGroupMembers = new();
    private List<Guid> UsersChatConnected = new();
    private List<Guid> UsersChatConnectedTmp = new();
    private UserGroupContract? UserGroup = null;
    private Guid UserId = new();
    private string? UserName = string.Empty;

    private string MessageInput = string.Empty;
    private bool ShowEmojiMenu = false;
    private Dictionary<string, string> emojiMap = new Dictionary<string, string>
                                        {
                                            {":)", "\U0001F642"},  {":D", "\U0001F604" }, {"(:", "\U0001F643" },
                                            {":(", "\U0001F641" }, { "T_T", "\U0001F62D" }, { ">:(", "\U0001F620" },
                                            {":thumbsup:", "\U0001F44D" }, {":thumbsdown:", "\U0001F44E" }, {":poop:", "\U0001F4A9" }
                                        };

    private bool UserInUserGroup = false;
    private bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    private PeriodicTimer RequestConnectedUsersTimer = new PeriodicTimer(TimeSpan.FromSeconds(20));

    protected override async Task OnInitializedAsync()
    {
        GetSetUserIdAndName();
        UserGroup = await AdministrationService.GetUserUserGroup(UserId);

        if (UserGroup!.Id == Guid.Empty)
        {
            return;
        }

        await GetSetUserGroupMembers();

        HubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        HubConnection.On<UserGroupMessageContract>("RecieveMessage", (UserGroupMessageContract userMessage) =>
        {

            UserMessages.Add(userMessage);
            StateHasChanged();
        });
        HubConnection.On("SendConnectedUserId", () =>
        {
            SendConnectedUserId();
        });
        HubConnection.On<Guid>("RecieveConnectedUserId", (Guid userId) =>
        {
            if (!UsersChatConnectedTmp.Contains(userId))
            {
                UsersChatConnectedTmp.Add(userId);
                UsersChatConnected = UsersChatConnectedTmp;
                StateHasChanged();
            }
        });

        await HubConnection.StartAsync();

        await AddUserToHubGroup();
        await RequestConnectedUserId();
        await SendConnectedUserId();

        UserMessages = await ChatService.GetUserGroupMessages(UserGroup.Id);

        RunRequestConnectedUsersTimer();

        UserInUserGroup = true;
    }

    private async Task GetSetUserIdAndName()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        UserId = Guid.Parse(userId!);
        UserName = user.Identity.Name;
    }

    private async Task GetSetUserGroupMembers()
    {
        UserGroupMembers = await AdministrationService.GetUserGroupMembers(UserGroup.Id);
        UserGroupMembers = UserGroupMembers!.FindAll(u => u.Id != UserId);
    }

    private async Task AddUserToHubGroup()
    {
        await HubConnection.SendAsync("AddToGroup", UserGroup!.Id.ToString());
    }

    private async Task RequestConnectedUserId()
    {
        await HubConnection.SendAsync("RequestConnectedUserId", UserGroup!.Id.ToString());
    }

    private async Task SendConnectedUserId()
    {
        await HubConnection.SendAsync("SendConnectedUserId", UserId, UserGroup!.Id.ToString());
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(MessageInput))
        {
            var userMessage = new UserGroupMessageContract { UserId = UserId, UserName = UserName!, Message = MessageInput, DateSent = DateTime.Now, UserGroupId = UserGroup!.Id };
            await HubConnection.SendAsync("SendMessage", userMessage, UserGroup.Id.ToString());

            await ChatService.AddUserGroupMessage(userMessage);

            MessageInput = string.Empty;
        }
    }

    private async void RunRequestConnectedUsersTimer()
    {
        while (await RequestConnectedUsersTimer.WaitForNextTickAsync())
        {
            UsersChatConnectedTmp.Clear();
            await RequestConnectedUserId();
            StateHasChanged();
        }
    }

    private void ToggleEmojiMenu()
    {
        ShowEmojiMenu = !ShowEmojiMenu;
    }

    private void InsertEmoji(string emojiCode)
    {
        MessageInput = MessageInput += emojiCode;
    }

    private void FindAndReplaceEmoji()
    {
        var output = new StringBuilder(MessageInput);
        foreach (var kvp in emojiMap)
            output.Replace(kvp.Key, kvp.Value);

        MessageInput = output.ToString();
    }

    public async ValueTask DisposeAsync()
    {
        RequestConnectedUsersTimer.Dispose();
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}
